# ui_steps.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø v6 - —Å XLSX)

import streamlit as st
import pandas as pd
import numpy as np
import time
import math
import numbers
import io
import plotly.express as px
import plotly.graph_objects as pgo
from sklearn.metrics import confusion_matrix, roc_curve, precision_recall_curve, auc
from sklearn.inspection import permutation_importance
from scipy.optimize import differential_evolution
from sklearn.model_selection import train_test_split

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
import ml_core
from utils import detect_csv_sep, human_time_ms, enforce_min_duration, download_button
from ui_config import MODEL_DESCRIPTIONS, get_model_tags, RANDOM_SEED

# ... (–ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–π render_step0_home –ø–æ render_step4_analysis –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

def render_step0_home():
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –¥–æ–º–∞—à–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É."""
    st.title("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Sminex ML!")
    st.markdown("""
    **Sminex ML ‚Äî —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.**
    –û–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç:
    * **–ó–∞–≥—Ä—É–∂–∞—Ç—å** –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV/XLSX.
    * **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å** —Ç–∏–ø –∑–∞–¥–∞—á–∏ (–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–ª–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏—è).
    * **–û–±—É—á–∞—Ç—å –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å** –¥–µ—Å—è—Ç–∫–∏ –º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.
    * **–ü–æ–ª—É—á–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç** –æ –∫–∞—á–µ—Å—Ç–≤–µ –º–æ–¥–µ–ª–∏.
    * **–î–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã** –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    * **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä "–ß—Ç–æ, –µ—Å–ª–∏?"** –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
    """)
    st.subheader("–ö–∞–∫ –Ω–∞—á–∞—Ç—å?")
    st.markdown("""
    1.  –ù–∞–∂–º–∏—Ç–µ **"üìÅ 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"** –≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é.
    2.  –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏.
    3.  –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ.
    """)
    if st.button("üöÄ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", type="primary"):
        st.session_state.wizard_step = 1
        st.rerun()

def render_step1_upload():
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç UI –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
    st.header("–®–∞–≥ 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    st.markdown("""
    –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV –∏–ª–∏ Excel. –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã, –≥–¥–µ:
    * **–°—Ç—Ä–æ–∫–∏** ‚Äî —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–ª–∏–µ–Ω—Ç—ã, —Ç–æ–≤–∞—Ä—ã, —Å–¥–µ–ª–∫–∏).
    * **–°—Ç–æ–ª–±—Ü—ã** ‚Äî —ç—Ç–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–ø—Ä–∏–∑–Ω–∞–∫–∏) —ç—Ç–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è.
    """)
    up = st.file_uploader("CSV/XLSX —Ñ–∞–π–ª", type=["csv", "xls", "xlsx"], help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 200 –ú–ë")
    
    data_loaded = False
    if up is not None:
        try:
            t0 = time.time()
            if up.name.lower().endswith(".csv"):
                first_bytes = up.read(50_000)
                up.seek(0)
                sep = detect_csv_sep(first_bytes)
                df = pd.read_csv(up, sep=sep)
                st.info(f"‚úÖ –û–ø—Ä–µ–¥–µ–ª—ë–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å CSV: **'{sep}'**")
            else:
                xls = pd.ExcelFile(up)
                sheet = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç Excel", options=xls.sheet_names)
                df = pd.read_excel(xls, sheet_name=sheet)
            
            st.session_state.timer_info = {"load_ms": int((time.time() - t0) * 1000)}
            st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {df.shape[0]} —Å—Ç—Ä–æ–∫ √ó {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤ –∑–∞ {human_time_ms(st.session_state.timer_info['load_ms'])}")
            st.dataframe(df.head(10), use_container_width=True)
            
            # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
            keys_to_reset = [
                'target', 'task_type', 'train_X', 'train_y', 'X_train', 'X_test',
                'y_train', 'y_test', 'leaderboard', 'active_model_name', 'best_estimator',
                'fitted_pipe', 'prediction_data', 'primary_metric', 'selected_features',
                'available_features', 'calculator_base_data', 'dt_cols_hint'
            ]
            for key in keys_to_reset:
                if key in st.session_state:
                    st.session_state.pop(key, None)
            
            st.session_state.train_df = df
            data_loaded = True
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
    
    if st.button("–î–∞–ª–µ–µ ‚ûú", type="primary", disabled=not data_loaded):
        st.session_state.wizard_step = 2
        st.rerun()


def render_step2_setup():
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç UI –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—á–∏."""
    st.header("–®–∞–≥ 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞—á–∏: –¶–µ–ª—å –∏ –ø—Ä–∏–∑–Ω–∞–∫–∏")
    df = st.session_state.get("train_df")
    if df is None:
        st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞—Ç–∞—Å–µ—Ç –Ω–∞ —à–∞–≥–µ 1.")
        if st.button("‚¨Ö –ù–∞–∑–∞–¥ –Ω–∞ –®–∞–≥ 1"):
            st.session_state.wizard_step = 1
            st.rerun()
        return

    cols = list(df.columns)
    
    st.markdown("#### üéØ 1. –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü (target)")
    st.markdown("–≠—Ç–æ —Ç–æ, —á—Ç–æ –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å.")
    
    current_target = st.session_state.get('target')
    target_index = cols.index(current_target) + 1 if current_target in cols else 0
    target = st.selectbox("–¶–µ–ª–µ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü", options=["‚Äî"] + cols, index=target_index)

    if target == "‚Äî":
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        return
        
    st.session_state.target = target
    try:
        task_type = ml_core.detect_problem_type(df[target])
        st.session_state.task_type = task_type
        st.session_state.primary_metric = ml_core.get_primary_metric(task_type)
        st.success(f"–û–ø—Ä–µ–¥–µ–ª—ë–Ω —Ç–∏–ø –∑–∞–¥–∞—á–∏: **{task_type}**. –û—Å–Ω–æ–≤–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞: **{st.session_state.primary_metric}**")
    except ValueError as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: {e}")
        return

    st.markdown("#### üìã 2. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü—ã —Å –¥–∞—Ç–∞–º–∏")
    st.markdown("–ò—Å–∫–ª—é—á–∏—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏ —É–∫–∞–∂–∏—Ç–µ, –≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –¥–∞—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–≥–æ–¥, –º–µ—Å—è—Ü –∏ —Ç.–¥.).")

    available_features = [col for col in df.columns if col != target]
    st.session_state.available_features = available_features
    
    with st.form("features_and_dates_form"):
        selected_features = st.multiselect(
            "–ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ):",
            options=available_features,
            default=st.session_state.get('selected_features', [])
        )
        
        features_to_check_for_dates = selected_features or available_features
        potential_dt_cols = [
            c for c in features_to_check_for_dates 
            if any(k in c.lower() for k in ["date", "–¥–∞—Ç", "–≤—Ä–µ–º", "time"]) or pd.api.types.is_datetime64_any_dtype(df[c])
        ]
        
        dt_cols_hint = st.multiselect(
            "–°—Ç–æ–ª–±—Ü—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –¥–∞—Ç—É/–≤—Ä–µ–º—è (–¥–ª—è –∞–≤—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤):",
            options=potential_dt_cols,
            default=st.session_state.get('dt_cols_hint', [])
        )

        submitted = st.form_submit_button("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–±—É—á–µ–Ω–∏—é", type="primary")
        if submitted:
            st.session_state.selected_features = selected_features
            st.session_state.dt_cols_hint = dt_cols_hint
            st.session_state.wizard_step = 3
            st.rerun()

def render_step3_training():
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç UI –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π."""
    st.header("–®–∞–≥ 3. –û–±—É—á–µ–Ω–∏–µ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")
    
    if 'train_df' not in st.session_state or 'target' not in st.session_state:
        st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —à–∞–≥–∏ 1 –∏ 2.")
        return

    df = st.session_state.train_df
    target_col = st.session_state.target
    task = st.session_state.task_type
    
    features = st.session_state.get('selected_features') or st.session_state.get('available_features', [])
    X = df[features]
    y = df[target_col].dropna()
    X = X.loc[y.index]

    if 'X_train' not in st.session_state:
         stratify = y if task in ('binary', 'multiclass') else None
         st.session_state.X_train, st.session_state.X_test, st.session_state.y_train, st.session_state.y_test = train_test_split(
             X, y, test_size=0.2, random_state=RANDOM_SEED, stratify=stratify
         )

    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ", type="primary"):
        models = ml_core.get_models(task)
        if not models:
            st.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: xgboost, lightgbm, catboost.")
            return

        dt_cols_hint = st.session_state.get('dt_cols_hint')
        pre_unscaled = ml_core.build_preprocessor(X, dt_cols_hint, use_scaler=False, handle_outliers=True)
        pre_scaled = ml_core.build_preprocessor(X, dt_cols_hint, use_scaler=True, handle_outliers=True)
        
        results = []
        progress_bar = st.progress(0, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è...")
        status_text = st.empty()
        
        t0_all = time.time()
        for i, (name, model) in enumerate(models.items()):
            status_text.info(f"‚è≥ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ {i+1}/{len(models)}: {name}")
            preprocessor = pre_scaled if ml_core.is_linear_model(name) else pre_unscaled
            
            scores, duration = ml_core.cv_evaluate(preprocessor, model, X, y, task, n_splits=5, shuffle=True, seed=RANDOM_SEED)
            
            row = {"model": name, "cv_time": human_time_ms(duration), **scores}
            results.append(row)
            progress_bar.progress((i + 1) / len(models), f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {name}")

        status_text.empty()
        progress_bar.empty()
        enforce_min_duration(t0_all, min_seconds=4.0)

        leaderboard = pd.DataFrame(results)
        primary_metric = st.session_state.primary_metric
        sort_metric = ml_core.choose_sort_metric(leaderboard, task, primary_metric)
        
        if sort_metric:
            ascending = ml_core.metric_ascending(sort_metric)
            leaderboard = leaderboard.sort_values(by=sort_metric, ascending=ascending).reset_index(drop=True)
            
        st.session_state.leaderboard = leaderboard
        best_model_name = ml_core.select_best_model(leaderboard, task, sort_metric)
        st.session_state.active_model_name = best_model_name
        st.success(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å –ø–æ –º–µ—Ç—Ä–∏–∫–µ '{sort_metric}': **{best_model_name}**")
        st.rerun()

    if 'leaderboard' in st.session_state:
        st.subheader("üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –º–æ–¥–µ–ª–µ–π")
        st.dataframe(st.session_state.leaderboard.style.format(precision=4), use_container_width=True)
        
        st.subheader("üÉè –í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        model_names = st.session_state.leaderboard['model'].tolist()
        active_model_idx = model_names.index(st.session_state.active_model_name) if st.session_state.active_model_name in model_names else 0
        
        new_active_model = st.selectbox("–ê–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å", model_names, index=active_model_idx)
        st.session_state.active_model_name = new_active_model

        if st.button(f"‚úÖ –û–±—É—á–∏—Ç—å '{new_active_model}' –Ω–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –∞–Ω–∞–ª–∏–∑—É", type="primary"):
            with st.spinner(f"–û–±—É—á–µ–Ω–∏–µ '{new_active_model}' –Ω–∞ –ø–æ–ª–Ω–æ–º –¥–∞—Ç–∞—Å–µ—Ç–µ..."):
                model_instance = ml_core.get_models(task)[new_active_model]
                preprocessor = ml_core.build_preprocessor(
                    st.session_state.X_train, st.session_state.get('dt_cols_hint'), 
                    use_scaler=ml_core.is_linear_model(new_active_model), handle_outliers=True
                )
                st.session_state.fitted_pipe = ml_core.fit_best(preprocessor, model_instance, X, y)
            
            st.success(f"–ú–æ–¥–µ–ª—å '{new_active_model}' –æ–±—É—á–µ–Ω–∞!")
            st.session_state.wizard_step = 4
            st.rerun()

def render_step4_analysis():
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç UI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–æ–¥–µ–ª–∏."""
    st.header(f"–®–∞–≥ 4. –ê–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–∏: {st.session_state.get('active_model_name', '')}")

    if 'fitted_pipe' not in st.session_state:
        st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –Ω–∞ —à–∞–≥–µ 3.")
        return

    est = st.session_state.fitted_pipe
    X_test = st.session_state.X_test
    y_test = st.session_state.y_test
    task = st.session_state.task_type
    y_pred = est.predict(X_test)

    if task == 'regression':
        rmse = math.sqrt(ml_core.mean_squared_error(y_test, y_pred))
        mae = ml_core.mean_absolute_error(y_test, y_pred)
        r2 = ml_core.r2_score(y_test, y_pred)
        st.subheader("üìà –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ")
        c1, c2, c3 = st.columns(3)
        c1.metric("RMSE", f"{rmse:,.2f}")
        c2.metric("MAE", f"{mae:,.2f}")
        c3.metric("R¬≤", f"{r2:.3f}")
    else: # Classification
        st.subheader("üìà –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ")
        acc = ml_core.accuracy_score(y_test, y_pred)
        f1 = ml_core.f1_score(y_test, y_pred, average='weighted')
        c1, c2 = st.columns(2)
        c1.metric("Accuracy", f"{acc:.3f}")
        c2.metric("F1-weighted", f"{f1:.3f}")
        
        st.subheader("üß© –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫")
        labels = sorted(y_test.unique())
        cm = confusion_matrix(y_test, y_pred, labels=labels)
        fig = px.imshow(cm, text_auto=True, labels=dict(x="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è", y="–ò—Å—Ç–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", color="–ö–æ–ª-–≤–æ"),
                        x=labels, y=labels, color_continuous_scale='Blues')
        st.plotly_chart(fig, use_container_width=True)

    st.subheader("üîç –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (Permutation Importance)")
    with st.spinner("–†–∞—Å—á–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤..."):
        result = permutation_importance(
            est, X_test, y_test, n_repeats=5, random_state=RANDOM_SEED, n_jobs=-1
        )
        importances = pd.DataFrame({
            'feature': X_test.columns,
            'importance_mean': result.importances_mean
        }).sort_values('importance_mean', ascending=True).tail(20)
        
        fig = px.bar(importances, x='importance_mean', y='feature', orientation='h', title="–¢–æ–ø-20 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        st.plotly_chart(fig, use_container_width=True)

    if st.button("–î–∞–ª–µ–µ –∫ –ü—Ä–æ–≥–Ω–æ–∑—É ‚ûú", type="primary"):
        st.session_state.wizard_step = 5
        st.rerun()

def render_step5_predict():
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç UI –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    st.header("–®–∞–≥ 5. –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    if 'fitted_pipe' not in st.session_state:
        st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –Ω–∞ —à–∞–≥–µ 3.")
        return

    up = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞", type=["csv", "xls", "xlsx"])

    if up:
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω
            if up.name.lower().endswith('.csv'):
                df_new = pd.read_csv(up)
            else:
                df_new = pd.read_excel(up)

            est = st.session_state.fitted_pipe
            original_features = st.session_state.X_train.columns
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            missing_cols = set(original_features) - set(df_new.columns)
            if missing_cols:
                st.error(f"–í –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {list(missing_cols)}")
                return
            
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫
            df_to_predict = df_new[original_features]

            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ..."):
                predictions = est.predict(df_to_predict)

            result_df = df_new.copy()
            result_df[f"prediction_{st.session_state.target}"] = predictions
            st.session_state.prediction_data = result_df
            
            st.success("‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –≥–æ—Ç–æ–≤!")
            st.dataframe(result_df.head(), use_container_width=True)
            
            # --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è XLSX ---
            st.subheader("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            col1, col2 = st.columns(2)
            
            with col1:
                csv_bytes = result_df.to_csv(index=False, decimal=',', sep=';').encode('utf-8-sig')
                download_button(csv_bytes, "predictions.csv", "–°–∫–∞—á–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV")

            with col2:
                try:
                    output = io.BytesIO()
                    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                        result_df.to_excel(writer, index=False, sheet_name='Predictions')
                    xlsx_bytes = output.getvalue()
                    download_button(xlsx_bytes, "predictions.xlsx", "–°–∫–∞—á–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ XLSX")
                except ImportError:
                    st.caption("–î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ XLSX —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install xlsxwriter")
                except Exception as e:
                    st.caption(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ XLSX: {e}")

        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")

    if st.button("–î–∞–ª–µ–µ –∫ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É ‚ûú", type="primary"):
        st.session_state.wizard_step = 6
        st.rerun()

def benchmark_and_estimate_time(est, base_row, bounds, cat_choices, popsize, maxiter):
    """–ü—Ä–æ–≤–æ–¥–∏—Ç –º–∏–∫—Ä–æ-–±–µ–Ω—á–º–∞—Ä–∫ –∏ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ–±—â–µ–µ –≤—Ä–µ–º—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏."""
    with st.spinner("–ü—Ä–æ–≤–æ–∂—É –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."):
        timings = []
        n_samples = 20
        for _ in range(n_samples):
            row_to_predict = base_row.copy()
            for f, (lo, hi) in bounds.items():
                row_to_predict[f] = np.random.uniform(lo, hi)
            for f, choices in cat_choices.items():
                row_to_predict[f] = np.random.choice(choices)
            
            start_time = time.perf_counter()
            _ = est.predict(row_to_predict)
            end_time = time.perf_counter()
            timings.append(end_time - start_time)
        
        avg_time_per_eval_ms = (sum(timings) / n_samples) * 1000
        total_evals = popsize * maxiter
        total_time_sec = (total_evals * avg_time_per_eval_ms) / 1000

        if total_time_sec < 2:
            estimate_str = "–º–µ–Ω–µ–µ –ø–∞—Ä—ã —Å–µ–∫—É–Ω–¥."
        elif total_time_sec < 60:
            estimate_str = f"–ø—Ä–∏–º–µ—Ä–Ω–æ {int(total_time_sec)} —Å–µ–∫—É–Ω–¥."
        else:
            minutes = total_time_sec / 60
            estimate_str = f"–ø—Ä–∏–º–µ—Ä–Ω–æ {minutes:.1f} –º–∏–Ω—É—Ç."

        st.session_state.time_estimation = f"‚ÑπÔ∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞—Å—á–µ—Ç–∞: **{estimate_str}**"

def render_step6_calculator():
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç UI –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ '–ß—Ç–æ, –µ—Å–ª–∏?' —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π."""
    st.header("–®–∞–≥ 6. –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ '–ß—Ç–æ, –µ—Å–ª–∏?'")
    
    if 'fitted_pipe' not in st.session_state:
        st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.")
        return

    est = st.session_state.fitted_pipe
    X_train = st.session_state.X_train
    task = st.session_state.task_type

    st.subheader("1. –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    idx = st.number_input("–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö", min_value=0, max_value=len(X_train)-1, value=0)
    base_row = X_train.iloc[[idx]]
    st.dataframe(base_row)

    st.subheader("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    
    all_features = base_row.columns.tolist()
    num_features = [f for f in all_features if pd.api.types.is_numeric_dtype(X_train[f])]
    cat_features = [f for f in all_features if not pd.api.types.is_numeric_dtype(X_train[f])]

    st.markdown("**–ß–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏**")
    bounds = {}
    for f in num_features:
        min_val, max_val = float(X_train[f].min()), float(X_train[f].max())
        bounds[f] = st.slider(f"–î–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è '{f}'", min_val, max_val, (min_val, max_val))

    st.markdown("**–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏** (–æ—Ç–º–µ—Ç—å—Ç–µ —Ç–µ, —á—Ç–æ –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å)")
    cat_choices = {}
    for f in cat_features:
        options = sorted(list(X_train[f].dropna().unique()))
        if st.checkbox(f"–†–∞–∑—Ä–µ—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ '{f}'", key=f"check_{f}"):
            cat_choices[f] = options

    if task == 'regression':
        objective = st.radio("–¶–µ–ª—å", ["–ú–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å", "–ú–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å"], horizontal=True)
    else:
        objective = "–ú–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å"
    
    popsize_help_text = """
    –≠—Ç–æ –∫–∞–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ "—Ä–∞–∑–≤–µ–¥—á–∏–∫–æ–≤", –∫–æ—Ç–æ—Ä—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –ø–æ–∏—Å–∫–∏ –ª—É—á—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è.
    - **–ú–∞–ª–µ–Ω—å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (5-10):** –ë—ã—Å—Ç—Ä—ã–π, –Ω–æ –º–µ–Ω–µ–µ —Ç—â–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫. –ú–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ "—Ö–æ—Ä–æ—à–µ–µ", –Ω–æ –Ω–µ "–ª—É—á—à–µ–µ" —Ä–µ—à–µ–Ω–∏–µ.
    - **–ë–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (20+):** –ë–æ–ª–µ–µ –º–µ–¥–ª–µ–Ω–Ω—ã–π, –Ω–æ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –∏ –≥–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫. –ü–æ–≤—ã—à–∞–µ—Ç —à–∞–Ω—Å—ã –Ω–∞–π—Ç–∏ –Ω–∞–∏–ª—É—á—à—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é.
    """
    popsize = st.slider("–†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏ (–±–æ–ª—å—à–µ = –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ, –Ω–æ –¥–æ–ª—å—à–µ)", 5, 50, 15, help=popsize_help_text)
    maxiter = st.slider("–ú–∞–∫—Å. –∏—Ç–µ—Ä–∞—Ü–∏–π (–±–æ–ª—å—à–µ = –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ, –Ω–æ –¥–æ–ª—å—à–µ)", 10, 200, 50)

    if 'time_estimation' in st.session_state:
        st.info(st.session_state.time_estimation)

    col1, col2 = st.columns([1, 2])
    with col1:
        if st.button("‚è±Ô∏è –û—Ü–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è"):
            benchmark_and_estimate_time(est, base_row, bounds, cat_choices, popsize, maxiter)
            st.rerun()
    with col2:
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é", type="primary"):
            with st.spinner("–ò–¥–µ—Ç –ø–æ–¥–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."):
                if 'time_estimation' in st.session_state:
                    del st.session_state['time_estimation']
                
                optimizable_num = list(bounds.keys())
                optimizable_cat = list(cat_choices.keys())
                
                optimizer_bounds = [bounds[f] for f in optimizable_num]
                for f in optimizable_cat:
                    optimizer_bounds.append((0, len(cat_choices[f]) - 1e-9))

                def objective_function(x):
                    row_to_predict = base_row.copy()
                    for i, f in enumerate(optimizable_num):
                        row_to_predict[f] = x[i]
                    offset = len(optimizable_num)
                    for i, f in enumerate(optimizable_cat):
                        choice_idx = int(x[offset + i])
                        row_to_predict[f] = cat_choices[f][choice_idx]

                    if task == 'regression':
                        score = est.predict(row_to_predict)[0]
                    else:
                        score = est.predict_proba(row_to_predict)[0, 1]
                    
                    return -score if objective == "–ú–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å" else score

                result = differential_evolution(
                    objective_function, bounds=optimizer_bounds,
                    popsize=popsize, maxiter=maxiter, seed=RANDOM_SEED
                )

                st.success("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                
                if task == 'regression':
                    base_pred = est.predict(base_row)[0]
                else:
                    base_pred = est.predict_proba(base_row)[0, 1]
                
                opt_pred = -result.fun if objective == "–ú–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å" else result.fun

                st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç")
                c1, c2, c3 = st.columns(3)
                c1.metric("–ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑", f"{base_pred:.4f}")
                c2.metric("–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑", f"{opt_pred:.4f}")
                c3.metric("–ü—Ä–∏—Ä–æ—Å—Ç", f"{opt_pred - base_pred:.4f}", delta=f"{opt_pred - base_pred:.4f}")
                
                optimal_row = base_row.copy()
                x_opt = result.x
                for i, f in enumerate(optimizable_num):
                    optimal_row[f] = x_opt[i]
                offset = len(optimizable_num)
                for i, f in enumerate(optimizable_cat):
                    choice_idx = int(x_opt[offset + i])
                    optimal_row[f] = cat_choices[f][choice_idx]
                
                st.subheader("üîß –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
                comparison_df = pd.concat([base_row, optimal_row])
                comparison_df.index = ["–ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞", "–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞"]
                
                changed_cols = [col for col in all_features if str(comparison_df[col].iloc[0]) != str(comparison_df[col].iloc[1])]
                
                if changed_cols:
                    st.dataframe(comparison_df[changed_cols].T.style.format(precision=3))
                else:
                    st.info("–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –±–∞–∑–æ–≤—ã–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω—ã.")
    
    st.markdown("---")
    if st.button("üè† –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ (–Ω–∞ –≥–ª–∞–≤–Ω—É—é)"):
        for key in list(st.session_state.keys()):
            del st.session_state[key]
        st.rerun()
