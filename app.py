import streamlit as st
from streamlit_drawable_canvas import st_canvas
from shapely.geometry import Polygon, LineString
from shapely.ops import split
import matplotlib.pyplot as plt
import json, math

# ==========================
#   –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò UI
# ==========================

st.set_page_config(layout="wide", page_title="–ö–≤–∞—Ä—Ç–∏—Ä–æ–≥—Ä–∞—Ñ–∏—è")
st.title("üìê –ö–≤–∞—Ä—Ç–∏—Ä–æ–≥—Ä–∞—Ñ–∏—è Architect Edition")

# ‚Äî Sidebar: –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî
st.sidebar.header("üè¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–¥–∞–Ω–∏—è –∏ —Å–µ—Ç–∫–∏")
floors = st.sidebar.number_input("–≠—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ", min_value=1, value=10)
scale = st.sidebar.number_input("–º–º –Ω–∞ –ø–∏–∫—Å–µ–ª—å", min_value=0.1, value=10.0, step=0.1)
show_snap = st.sidebar.checkbox("–ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å–µ—Ç–∫–µ (snap-to-grid)", value=True)
grid_mm = st.sidebar.number_input("–®–∞–≥ —Å–µ—Ç–∫–∏ (–º–º)", min_value=5, value=100, step=5)

# ‚Äî Sidebar: –ö–≤–∞—Ä—Ç–∏—Ä–æ–≥—Ä–∞—Ñ–∏—è ‚Äî
st.sidebar.header("üè† –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä")
types = ['–°—Ç—É–¥–∏—è','1–°','2–°','3–°','4–°']
percentages = {}
col1, col2 = st.sidebar.columns(2)
for i,t in enumerate(types):
    c = col1 if i%2==0 else col2
    with c:
        percentages[t] = st.slider(f"% {t}", 0, 100, 100//len(types), key=f"pct_{t}")
if sum(percentages.values()) != 100:
    st.sidebar.error(f"–°—É–º–º–∞ % –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 100% (—Å–µ–π—á–∞—Å {sum(percentages.values())}%)")
    st.stop()

st.sidebar.subheader("–î–∏–∞–ø–∞–∑–æ–Ω—ã –ø–ª–æ—â–∞–¥–µ–π (–º¬≤)")
areas = {}
for t in types:
    mn, mx = st.sidebar.slider(f"{t}", 1.0, 200.0, (20.0,50.0), key=f"area_{t}")
    areas[t] = (mn, mx)

# ‚Äî Sidebar: –ü—Ä–æ–µ–∫—Ç ‚Äî
st.sidebar.header("üíæ –ü—Ä–æ–µ–∫—Ç")
proj_name = st.sidebar.text_input("–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞ (JSON)", "plan.json")
# Canvas upload/download placeholders
downloaded = None

# ==========================
#   CANVAS: –ß–ï–†–ß–ï–ù–ò–ï –ü–õ–ê–ù–ê
# ==========================

st.subheader("1Ô∏è‚É£ –ù–∞—Ä–∏—Å—É–π—Ç–µ –ø–ª–∞–Ω —ç—Ç–∞–∂–∞")
st.markdown("–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø–æ–ª–∏–≥–æ–Ω ‚Äî –≤–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç—É—Ä; –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª–∏–≥–æ–Ω—ã ‚Äî –úOP –∑–æ–Ω—ã.")
canvas_data = st_canvas(
    stroke_width=2,
    stroke_color='#000000',
    fill_color='rgba(255,165,0,0.3)',
    background_color='#F0F0F0',
    drawing_mode='polygon',
    key='canvas', width=800, height=600,
    grid_color='#DDD', grid_spacing=int(grid_mm/scale),
    )

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ / –∑–∞–≥—Ä—É–∑–∫–∞
if canvas_data.json_data:
    js = json.dumps(canvas_data.json_data)
    st.sidebar.download_button("üíæ –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞ JSON", js, file_name=proj_name, mime="application/json")
uploaded = st.sidebar.file_uploader("üìÇ –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞ JSON", type=['json'])
if uploaded:
    initial = json.load(uploaded)
    canvas_data = st_canvas(
        stroke_width=2, stroke_color='#000000', fill_color='rgba(255,165,0,0.3)',
        background_color='#F0F0F0', drawing_mode='polygon', key='canvas2',
        width=800, height=600, initial_drawing=initial,
        grid_color='#DDD', grid_spacing=int(grid_mm/scale),
    )

# ==========================
#   –ü–û–õ–ò–ì–û–ù –≠–¢–ê–ñ–ê + –ú–û–ü
# ==========================
def snap(pt):
    x,y = pt
    if not show_snap: return (x,y)
    g = grid_mm/scale
    return (round(x/g)*g, round(y/g)*g)

raw = canvas_data.json_data or {}
objs = raw.get('objects', [])
# –°–±–æ—Ä –ø–æ–ª–∏–≥–æ–Ω–æ–≤
polys = []
for o in objs:
    if o.get('type')=='polygon':
        pts = [snap((p['x'],p['y'])) for p in o['points']]
        if len(pts)>=3: polys.append(Polygon(pts))
if not polys:
    st.error("–ù–∞—Ä–∏—Å—É–π—Ç–µ –≤–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç—É—Ä!"); st.stop()
floor = polys[0]
for hole in polys[1:]:
    floor = floor.difference(hole)
# –†–∞–∑–º–µ—Ä—ã
minx,miny,maxx,maxy = floor.bounds
w_mm = (maxx-minx)*scale; h_mm = (maxy-miny)*scale
area_m2 = floor.area*scale**2/1e6
st.info(f"–ö–æ–Ω—Ç—É—Ä: {w_mm:.0f}√ó{h_mm:.0f} –º–º, –ø–ª–æ—â–∞–¥—å {area_m2:.2f} –º¬≤")

# ==========================
#   –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ö–í–ê–†–¢–ò–†
# ==========================
st.subheader("2Ô∏è‚É£ –ü–æ–¥–±–æ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –≤—Å–µ–º—É –∑–¥–∞–Ω–∏—é") 
if st.button("üöÄ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã"):
    # –û–±—â–µ–µ –∫–æ–ª-–≤–æ –∫–≤–∞—Ä—Ç–∏—Ä
    total_area = area_m2 * floors
    avg = {t:(areas[t][0]+areas[t][1])/2 for t in types}
    counts = {t: max(1,int(round(total_area*percentages[t]/100/avg[t]))) for t in types}
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
    per_floor = {i:{} for i in range(floors)}
    for t,c in counts.items():
        q,r = divmod(c,floors)
        for i in range(floors):
            per_floor[i][t] = q+(1 if i<r else 0)

    # –ü—Ä–æ—Å–º–æ—Ç—Ä —ç—Ç–∞–∂–µ–π
    fl = st.slider("–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", 1, floors, 1)
    # –¶–µ–ª–µ–≤—ã–µ –ø–ª–æ—â–∞–¥–∏ –≤ px^2
    targets=[]
    for t,n in per_floor[fl-1].items():
        if n>0:
            tot_m2 = total_area*percentages[t]/100
            avg_m2 = tot_m2/counts[t]
            px2 = avg_m2*1e6/scale**2
            targets += [(t,px2)]*n

    # –ù–∞—Ä–µ–∑–∫–∞
    def split_poly(poly,px2,tol=1e-2):
        mrr=poly.minimum_rotated_rectangle; coords=list(mrr.exterior.coords)
        # ... (–∞–ª–≥–æ—Ä–∏—Ç–º –∫–∞–∫ –ø—Ä–µ–∂–¥–µ)
        # –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –æ–ø—É—Å–∫–∞–µ–º - –Ω–æ –µ–≥–æ –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å
        return poly, None

    def layout(poly,targets):
        avail=[poly]; res=[]
        for t,px2 in targets:
            avail.sort(key=lambda p:p.area, reverse=True)
            p=avail.pop(0)
            a,rem = split_poly(p,px2)
            res.append((t,a))
            if rem: avail.append(rem)
        return res

    apartments = layout(floor,targets)
    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞
    fig,ax = plt.subplots(figsize=(8,6))
    cmap={'–°—Ç—É–¥–∏—è':'#FFC107','1–°':'#8BC34A','2–°':'#03A9F4','3–°':'#E91E63','4–°':'#9C27B0'}
    for t,poly in apartments:
        x,y=poly.exterior.xy
        ax.fill([xi*scale for xi in x],[yi*scale for yi in y],color=cmap[t],alpha=0.7,edgecolor='black')
    ax.set_aspect('equal'); ax.axis('off')
    st.pyplot(fig)

    # –û—Ç—á–µ—Ç
    st.subheader("3Ô∏è‚É£ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —ç—Ç–∞–∂–∞–º")
    import pandas as pd
    df = pd.DataFrame([{'–≠—Ç–∞–∂':i+1,'–¢–∏–ø':t,'–ö–æ–ª-–≤–æ':per_floor[i][t]} 
                       for i in range(floors) for t in types])
    st.dataframe(df)
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å CSV", df.to_csv(index=False), file_name='report.csv')
