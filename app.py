# -*- coding: utf-8 -*-
"""Streamlit application ¬´–ö–≤–∞—Ä—Ç–∏—Ä–æ–≥—Ä–∞—Ñ–∏—è Architect Edition¬ª

–ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–º—É –¢–ó:
1. –ß–µ—Ä—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ —Å–µ—Ç–∫–µ (—Ä–∞–∑–º–µ—Ä –∑–∞–¥–∞—ë—Ç—Å—è –≤ –º–º). –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á—ë–Ω snap-to-grid, —É–≥–ª—ã —Ç–æ–ª—å–∫–æ 90¬∞.
2. –ù–∞ —Ö–æ–ª—Å—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–∞–º–∞ —Å–µ—Ç–∫–∞ –∏ live-–ø–æ–¥—Å–∫–∞–∑–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –≤ –º–º.
3. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, —á—Ç–æ —Å—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Ç–∏–ø–æ–≤ –∫–≤–∞—Ä—Ç–∏—Ä = 100 % (–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫—Ä–∞—Å–Ω—ã–π/–∑–µ–ª—ë–Ω—ã–π).
4. –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∞ —Å–∫–≤–æ–∑–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–æ–≥—Ä–∞—Ñ–∏—è, —Å–Ω–∞—á–∞–ª–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ–±—â–µ–µ —Ü–µ–ª–µ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –¥–µ–ª–∏—Ç—Å—è –ø–æ —ç—Ç–∞–∂–∞–º —á–µ—Ä–µ–∑ divmod.
5. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω –ø–ª–æ—â–∞–¥–µ–π (min, max –º¬≤); –ø—Ä–∏ —Ä–∞—Å–∫–ª–∞–¥–∫–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å –ø–ª–æ—â–∞–¥—è–º–∏ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ç–∞–∫, —á—Ç–æ–±—ã —Å—É–º–º–∞—Ä–Ω–æ —É–ª–æ–∂–∏—Ç—å—Å—è –≤ —Ü–µ–ª–µ–≤—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã.
6. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º–∏/–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ –ª–∏–Ω–∏—è–º–∏ –∫—Ä–∞—Ç–Ω–æ —à–∞–≥—É —Å–µ—Ç–∫–∏.
7. –í—Å–µ –æ—Å—Ç–∞—Ç–∫–∏ –ø–ª–æ—â–∞–¥–∏ –∞–≥—Ä–µ–≥–∏—Ä—É—é—Ç—Å—è –≤ –∫–≤–∞—Ä—Ç–∏—Ä—ã-¬´–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ¬ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –ø–ª–æ—â–∞–¥—å.
8. –ï—Å—Ç—å —ç–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞ –≤ JSON (–∫–æ–Ω—Ç—É—Ä—ã + –Ω–∞—Å—Ç—Ä–æ–π–∫–∏).

‚ö†Ô∏è –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –∏ –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–æ—Å—Ç–æ–π –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–∑—Ä–µ–∑–∫–∏ ¬´Largest First¬ª ‚Äì –æ–Ω –Ω–µ –¥–∞—ë—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ, –Ω–æ –¥–∞—ë—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ, 100 %-–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –±–µ–∑ –Ω–∞–∫–ª–æ–Ω–æ–≤.

–ó–∞–ø—É—Å–∫:  `streamlit run apartment_planner.py`
"""

from __future__ import annotations
import json
import math
import random
import base64
import io
from pathlib import Path

import streamlit as st
from streamlit_drawable_canvas import st_canvas
from shapely.geometry import Polygon, LineString, box
from shapely.ops import split
import pandas as pd
import matplotlib.pyplot as plt
from PIL import Image, ImageDraw

# =============================================================================
# -----------------------------  CONFIG & SIDEBAR  ----------------------------
# =============================================================================

st.set_page_config(layout="wide", page_title="–ö–≤–∞—Ä—Ç–∏—Ä–æ–≥—Ä–∞—Ñ–∏—è Architect Edition")
st.title("üìê –ö–≤–∞—Ä—Ç–∏—Ä–æ–≥—Ä–∞—Ñ–∏—è ‚Äî Architect Edition")

# ---------- project IO ----------
PROJECT_DIR = Path("projects")
PROJECT_DIR.mkdir(exist_ok=True)

def save_project(name: str, data: dict):
    (PROJECT_DIR / name).write_text(json.dumps(data, ensure_ascii=False, indent=2))

def load_project(name: str) -> dict | None:
    p = PROJECT_DIR / name
    return json.loads(p.read_text()) if p.exists() else None

# ---------------- GLOBAL SETTINGS ----------------
st.sidebar.header("üè¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–¥–∞–Ω–∏—è –∏ —Å–µ—Ç–∫–∏")
floors: int = st.sidebar.number_input("–≠—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ", min_value=1, value=10)
scale_mm_per_px: float = st.sidebar.number_input("–º–º –Ω–∞ –ø–∏–∫—Å–µ–ª—å", min_value=1.0, value=10.0, step=1.0)
grid_mm: int = st.sidebar.number_input("–®–∞–≥ —Å–µ—Ç–∫–∏ (–º–º)", min_value=10, value=100, step=10)
grip_px = grid_mm / scale_mm_per_px  # –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–ª–µ–µ

# ---------------- FLAT DISTRIBUTION ----------------
st.sidebar.header("üè† –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä")
TYPES = ["–°—Ç—É–¥–∏—è", "1–°", "2–°", "3–°", "4–°"]
percent = {}
areas_range: dict[str, tuple[float, float]] = {}

st.sidebar.subheader("–¶–µ–ª–µ–≤—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –∑–¥–∞–Ω–∏—é")
cols_pct = st.sidebar.columns(2)
_total = 0
for i, t in enumerate(TYPES):
    with cols_pct[i % 2]:
        percent[t] = st.slider(f"% {t}", 0, 100, 100 // len(TYPES), key=f"pct_{t}")
        _total += percent[t]

color_total = "green" if _total == 100 else "red"
st.sidebar.markdown(f"<p style='color:{color_total};font-weight:bold;'>–°—É–º–º–∞: {_total} %</p>", unsafe_allow_html=True)
if _total != 100:
    st.sidebar.error("–°—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–æ–≤–Ω–æ 100 %!")
    st.stop()

st.sidebar.subheader("–î–∏–∞–ø–∞–∑–æ–Ω –ø–ª–æ—â–∞–¥–µ–π, –º¬≤")
for t in TYPES:
    mn, mx = st.sidebar.slider(t, 10.0, 200.0, (25.0, 55.0), key=f"rng_{t}")
    areas_range[t] = (mn, mx)

# ---------------- PROJECT NAME ----------------
proj_name = st.sidebar.text_input("–ò–º—è –ø–∞–∫–µ—Ç–∞ (JSON)", value="my_project.json")
load_btn, save_btn = st.sidebar.columns(2)

# =============================================================================
# ----------------------------  CANVAS & GEOMETRY  ----------------------------
# =============================================================================

st.subheader("1Ô∏è‚É£ –ù–∞—Ä–∏—Å—É–π—Ç–µ –ø–ª–∞–Ω —Ç–∏–ø–æ–≤–æ–≥–æ —ç—Ç–∞–∂–∞")

# --- grid image (PIL) ---
GRID_IMG_SIZE = (1200, 800)

def generate_grid_image(step_px: int) -> Image.Image:
    img = Image.new("RGBA", GRID_IMG_SIZE, (240, 240, 240, 255))
    draw = ImageDraw.Draw(img)
    w, h = img.size
    for x in range(0, w, step_px):
        draw.line([(x, 0), (x, h)], fill=(200, 200, 200, 255))
    for y in range(0, h, step_px):
        draw.line([(0, y), (w, y)], fill=(200, 200, 200, 255))
    return img

grid_img = generate_grid_image(int(grip_px))
_buf = io.BytesIO()
grid_img.save(_buf, format="PNG")
encoded_grid = base64.b64encode(_buf.getvalue()).decode("utf-8")

# --- canvas ---
canvas_data = st_canvas(
    fill_color="rgba(255,165,0,0.3)",
    background_image=f"data:image/png;base64,{encoded_grid}",
    update_streamlit=True,
    drawing_mode="polygon",
    stroke_width=2,
    stroke_color="#000000",
    width=GRID_IMG_SIZE[0],
    height=GRID_IMG_SIZE[1],
    key="floor_canvas",
)

# ---------------------------  SNAP + VALIDATION  -----------------------------

def snap_point(pt: tuple[float, float], prev: tuple[float, float] | None) -> tuple[float, float]:
    """–°–¥–≤–∏–≥–∞–µ–º –≤–µ—Ä—à–∏–Ω—É –Ω–∞ —Å–µ—Ç–∫—É –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª (–•-–∏–ª–∏ Y) –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π"""
    x, y = pt
    x = round(x / grip_px) * grip_px
    y = round(y / grip_px) * grip_px
    if prev:
        px, py = prev
        # –≤—ã–±–∏—Ä–∞–µ–º –∫—É–¥–∞ –ø—Ä–∏–≤—è–∑–∞—Ç—å: –ø–æ —Å–∞–º–æ–º—É –º–∞–ª–µ–Ω—å–∫–æ–º—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é
        if abs(x - px) < abs(y - py):
            x = px  # –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫
        else:
            y = py  # –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫
    return x, y

def extract_floor_polygon() -> Polygon | None:
    raw = canvas_data.json_data or {}
    objs = raw.get("objects", [])
    if not objs:
        return None
    # –ø–µ—Ä–≤—ã–π –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª–∏–≥–æ–Ω ‚Äî –≤–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç—É—Ä, –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –ú–û–ü
    snap_prev = None
    polys: list[Polygon] = []
    for idx, o in enumerate(objs):
        if o.get("type") != "polygon":
            continue
        pts = [snap_point((p["x"], p["y"]), snap_prev) for p in o["points"]]
        snap_prev = pts[-1]
        if len(pts) < 3:
            continue
        poly = Polygon(pts)
        if not poly.is_valid or not poly.is_simple:
            st.error(f"–ü–æ–ª–∏–≥–æ–Ω {idx+1} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ‚Äî —Å–∞–º–æ–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ/–¥—É–±–ª–∏–∫–∞—Ç—ã.")
            st.stop()
        polys.append(poly)
    if not polys:
        return None
    floor_poly: Polygon = polys[0]
    for mop in polys[1:]:
        floor_poly = floor_poly.difference(mop)  # –≤—ã—á–∏—Ç–∞–µ–º –ú–û–ü
    return floor_poly

floor_poly = extract_floor_polygon()
if floor_poly is None:
    st.warning("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ä–∏—Å—É–π—Ç–µ –∫–æ–Ω—Ç—É—Ä —ç—Ç–∞–∂–∞ (–∏ –ú–û–ü, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)‚Ä¶")
    st.stop()

# —Ä–∞–∑–º–µ—Ä—ã + –ø–ª–æ—â–∞–¥—å —ç—Ç–∞–∂–∞
minx, miny, maxx, maxy = floor_poly.bounds
w_mm = (maxx - minx) * scale_mm_per_px
h_mm = (maxy - miny) * scale_mm_per_px
area_m2_floor = floor_poly.area * (scale_mm_per_px ** 2) / 1_000_000
st.success(f"–ì–∞–±–∞—Ä–∏—Ç—ã: {w_mm:.0f} √ó {h_mm:.0f} –º–º   |   –ü–ª–æ—â–∞–¥—å: {area_m2_floor:.2f} –º¬≤")

# =============================================================================
# ----------------------  ALLOCATION UTILS (ORTHO CUT) ------------------------
# =============================================================================

def cut_rect_ortho(poly: Polygon, target_area_px2: float) -> tuple[Polygon, Polygon]:
    """–†–∞–∑—Ä–µ–∑–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–º —Å—Ç—Ä–æ–≥–æ –≤–µ—Ä—Ç–∏–∫/–≥–æ—Ä–∏–∑, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º (apt, rest)"""
    # NB: poly –≤—Å–µ–≥–¥–∞ –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω—ã–π (–º—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–ª–∏), –ø–æ—ç—Ç–æ–º—É bounds ~ –º–∏–Ω–∏–º. –ø—Ä—è–º–æ—É–≥.
    minx, miny, maxx, maxy = poly.bounds
    width = maxx - minx
    height = maxy - miny

    # –≤—ã–±–∏—Ä–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ–∑–∞ –ø–æ –¥–ª–∏–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
    if width >= height:
        # —Ä–µ–∂–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–µ–π
        full_w_area = target_area_px2 / height
        cut_x = minx + full_w_area
        left = box(minx, miny, cut_x, maxy)
        right = box(cut_x, miny, maxx, maxy)
        return left, right
    else:
        # —Ä–µ–∂–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π
        full_h_area = target_area_px2 / width
        cut_y = miny + full_h_area
        bottom = box(minx, miny, maxx, cut_y)
        top = box(minx, cut_y, maxx, maxy)
        return bottom, top

def orth_pack(poly: Polygon, flats_targets_px2: list[tuple[str, float]]) -> list[tuple[str, Polygon]]:
    """–ù–∞–∏–≤–Ω–∞—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞ Largest-First.
    flats_targets_px2: —Å–ø–∏—Å–æ–∫ (<—Ç–∏–ø>, –ø–ª–æ—â–∞–¥—å –≤ px¬≤)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç [(—Ç–∏–ø, Polygon)]
    """
    placements: list[tuple[str, Polygon]] = []
    remain_polys: list[Polygon] = [poly]

    for flat_type, area_px2 in sorted(flats_targets_px2, key=lambda x: x[1], reverse=True):
        # –≤—ã–±–µ—Ä–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫—É—Å–æ–∫
        remain_polys.sort(key=lambda p: p.area, reverse=True)
        current = remain_polys.pop(0)
        if current.area < area_px2 * 0.9:  # —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ, —Å—á–∏—Ç–∞–µ–º –Ω–µ–≤–º–µ—â–µ–Ω–∏–µ–º
            st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –∫–≤–∞—Ä—Ç–∏—Ä ‚Äî —É–≤–µ–ª–∏—á—å—Ç–µ —ç—Ç–∞–∂ –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã/–ø–ª–æ—â–∞–¥–∏")
            break
        apt, rest = cut_rect_ortho(current, area_px2)
        placements.append((flat_type, apt))
        # –µ—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –Ω–µ –Ω—É–ª–µ–≤–æ–π ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        if rest.area > grip_px * grip_px:  # –µ—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ —Ö–æ—Ç—è –±—ã —Ä–∞–∑–º–µ—Ä–æ–º —Å –æ–¥–Ω—É –∫–ª–µ—Ç–∫—É
            remain_polys.append(rest)

    # –≤–µ—Å—å ¬´—Ö–≤–æ—Å—Ç¬ª –æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –ø–ª–æ—â–∞–¥–∏ –∑–∞–ª—å—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ç–∏–ø–æ–º (—Å–∞–º—ã–º –º–∞—Å—Å–æ–≤—ã–º)
    if remain_polys:
        tail_type = max(percent, key=percent.get)  # —Ç–∏–ø —Å –º–∞–∫—Å. –¥–æ–ª–µ–π
        for p in remain_polys:
            placements.append((tail_type, p))
    return placements

# =============================================================================
# ---------------------------  GENERATE APARTMENTS  ---------------------------
# =============================================================================

st.subheader("2Ô∏è‚É£ –ü–æ–¥–±–æ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –≤—Å–µ–º—É –∑–¥–∞–Ω–∏—é")

if st.button("–ü–æ–¥–æ–±—Ä–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä–æ–≥—Ä–∞—Ñ–∏—é"):
    if _total != 100:
        st.error("–°—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ ‚â† 100 % ‚Äî –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã.")
        st.stop()

    total_area_m2 = area_m2_floor * floors
    target_area_m2 = {t: total_area_m2 * percent[t] / 100 for t in TYPES}

    # —Å—á–∏—Ç–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–≤–∞—Ä—Ç–∏—Ä –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    avg_area = {t: sum(areas_range[t]) / 2 for t in TYPES}
    flats_total_cnt = {t: max(1, int(round(target_area_m2[t] / avg_area[t]))) for t in TYPES}

    # –¥–µ–ª–∏–º —á–µ—Ä–µ–∑ divmod –ø–æ —ç—Ç–∞–∂–∞–º
    per_floor_cnt: list[dict[str, int]] = [{t: 0 for t in TYPES} for _ in range(floors)]
    for t in TYPES:
        q, r = divmod(flats_total_cnt[t], floors)
        for i in range(floors):
            per_floor_cnt[i][t] = q + (1 if i < r else 0)

    # ================= –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ —ç—Ç–∞–∂–∞–º =============
    cmap = {
        "–°—Ç—É–¥–∏—è": "#FFC107",
        "1–°": "#8BC34A",
        "2–°": "#03A9F4",
        "3–°": "#E91E63",
        "4–°": "#9C27B0",
    }
    report_rows = []

    for fl in range(floors):
        st.markdown(f"### üè¢ –≠—Ç–∞–∂ {fl+1}")
        targets_px2: list[tuple[str, float]] = []
        for t, cnt in per_floor_cnt[fl].items():
            if cnt == 0:
                continue
            # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º cnt —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–ª–æ—â–∞–¥–µ–π –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            min_m2, max_m2 = areas_range[t]
            for _ in range(cnt):
                a_m2 = random.uniform(min_m2, max_m2)
                targets_px2.append((t, a_m2 * 1_000_000 / (scale_mm_per_px ** 2)))
        random.shuffle(targets_px2)

        placements = orth_pack(floor_poly, targets_px2)

        # ‚Äî –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî
        fig, ax = plt.subplots(figsize=(6, 5))
        for t, poly in placements:
            x, y = poly.exterior.xy
            ax.fill([xi * scale_mm_per_px for xi in x], [yi * scale_mm_per_px for yi in y],
                    color=cmap[t], alpha=0.7, edgecolor="black")
            minx, miny, maxx, maxy = poly.bounds
            wmm = (maxx - minx) * scale_mm_per_px
            hmm = (maxy - miny) * scale_mm_per_px
            area_m2 = poly.area * (scale_mm_per_px ** 2) / 1_000_000
            cx, cy = poly.representative_point().coords[0]
            ax.text(cx * scale_mm_per_px, cy * scale_mm_per_px,
                    f"{t}\n{wmm:.0f}√ó{hmm:.0f} –º–º\n{area_m2:.1f} –º¬≤",
                    ha="center", va="center", fontsize=7,
                    bbox=dict(facecolor="white", alpha=0.65, edgecolor="none"))
            report_rows.append({"–≠—Ç–∞–∂": fl+1, "–¢–∏–ø": t, "–ü–ª–æ—â–∞–¥—å, –º¬≤": area_m2})
        ax.set_aspect("equal")
        ax.axis("off")
        st.pyplot(fig)
        plt.close(fig)

    # ---------------- –°–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç ----------------
    df = pd.DataFrame(report_rows)
    st.markdown("## üìä –°–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –∑–¥–∞–Ω–∏—é")
    st.dataframe(df.groupby(["–¢–∏–ø"]).agg({"–ü–ª–æ—â–∞–¥—å, –º¬≤": "sum"}))

    csv_bytes = df.to_csv(index=False).encode("utf-8")
    st.sidebar.download_button("üì• –°–∫–∞—á–∞—Ç—å CSV", csv_bytes, file_name="report.csv", mime="text/csv")

    # auto-save
    project_data = {
        "settings": {
            "floors": floors,
            "scale_mm_per_px": scale_mm_per_px,
            "grid_mm": grid_mm,
            "percent": percent,
            "areas_range": areas_range,
        },
        "canvas": canvas_data.json_data,
    }
    save_project(proj_name, project_data)
    st.sidebar.success(f"–ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ {proj_name}")

# =============================================================================
# --------------------------  LOAD PROJECT BUTTON  ----------------------------
# =============================================================================
if load_btn.button("‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å"):
    data = load_project(proj_name)
    if not data:
        st.sidebar.error("–§–∞–π–ª –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        st.experimental_rerun()

if save_btn.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫"):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç—É—Ä –±–µ–∑ —Ä–∞—Å–∫–ª–∞–¥–∫–∏
    project_data = {
        "settings": {
            "floors": floors,
            "scale_mm_per_px": scale_mm_per_px,
            "grid_mm": grid_mm,
            "percent": percent,
            "areas_range": areas_range,
        },
        "canvas": canvas_data.json_data,
    }
    save_project(proj_name, project_data)
    st.sidebar.success("–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
