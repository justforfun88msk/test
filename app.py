canvas_result = st_canvas(
    fill_color="rgba(255, 0, 0, 0.3)",
    stroke_width=2,
    stroke_color="#FF0000",
    background_image=Image.fromarray(grid_img),
    update_streamlit=True,
    height=canvas_height,
    width=canvas_width,
    drawing_mode="polygon",
    key="canvas_mop"
)

# ==== –û–±—Ä–∞–±–æ—Ç–∫–∞ –ú–û–ü–æ–≤ ====
def extract_mop_polygons(data_json):
    polygons = []
    if not data_json or "objects" not in data_json:
        return []
    for obj in data_json["objects"]:
        if obj.get("type") == "polygon":
            path = obj.get("path")
            if path:
                poly = Polygon([(x, y) for x, y in path])
                if poly.is_valid:
                    polygons.append(poly)
    return polygons

mop_polys = extract_mop_polygons(canvas_result.json_data)
usable_poly = Polygon([(0, 0), (canvas_width, 0), (canvas_width, canvas_height), (0, canvas_height)])
if mop_polys:
    mop_union = unary_union(mop_polys)
    usable_poly = usable_poly.difference(mop_union)

# ==== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–∞—Ä—Ç–∏—Ä ====
st.subheader("2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–∞—Ä—Ç–∏—Ä")
st.caption("–ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–∞—Ä—Ç–∏—Ä —Å —É—á—ë—Ç–æ–º –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")

apt_constraints = {
    "–°—Ç—É–¥–∏—è": {"min": 28, "max": 31, "width": 7.2},
    "1-–∫–æ–º–Ω": {"min": 32, "max": 46, "width": 7.2},
    "2-–∫–æ–º–Ω": {"min": 47, "max": 65, "width": 7.2},
    "3-–∫–æ–º–Ω": {"min": 66, "max": 99, "width": 7.2},
}

TOTAL_AREA_M2 = (floor_width_m * floor_length_m - (len(mop_polys) * 15)) * floors  # –æ—Ü–µ–Ω–∫–∞ –ú–û–ü–æ–≤ –≤ 15 –º2 –∫–∞–∂–¥—ã–π

@st.cache_data
def generate_apartments():
    apartments = []
    for apt_type, percent in percent_distribution.items():
        target_area = TOTAL_AREA_M2 * (percent / 100)
        used = 0
        while used < target_area:
            s = random.randint(apt_constraints[apt_type]["min"], apt_constraints[apt_type]["max"])
            w = apt_constraints[apt_type]["width"]
            l = round(s / w, 2)
            if used + s > target_area:
                break
            apartments.append({"–¢–∏–ø": apt_type, "–ü–ª–æ—â–∞–¥—å": s, "–®–∏—Ä–∏–Ω–∞": w, "–î–ª–∏–Ω–∞": l})
            used += s
    return apartments

if st.button("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã"):
    plan = generate_apartments()
    df = pd.DataFrame(plan)
    st.dataframe(df)

    st.subheader("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º")
    fig, ax = plt.subplots()
    df.groupby("–¢–∏–ø")["–ü–ª–æ—â–∞–¥—å"].sum().plot(kind="bar", ax=ax)
    st.pyplot(fig)

    out = BytesIO()
    df.to_excel(out, index=False)
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å Excel", data=out.getvalue(), file_name="plan.xlsx")
