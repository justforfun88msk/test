import streamlit as st
from streamlit_drawable_canvas import st_canvas
from shapely.geometry import Polygon, LineString
from shapely.ops import split
import matplotlib.pyplot as plt
import pandas as pd
import json, math

# ==========================
#   –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò UI
# ==========================

st.set_page_config(layout="wide", page_title="–ö–≤–∞—Ä—Ç–∏—Ä–æ–≥—Ä–∞—Ñ–∏—è")
st.title("üìê –ö–≤–∞—Ä—Ç–∏—Ä–æ–≥—Ä–∞—Ñ–∏—è Architect Edition")

# ‚Äî Sidebar: –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî
st.sidebar.header("üè¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–¥–∞–Ω–∏—è –∏ —Å–µ—Ç–∫–∏")
floors = st.sidebar.number_input("–≠—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ", min_value=1, value=10)
scale = st.sidebar.number_input("–º–º –Ω–∞ –ø–∏–∫—Å–µ–ª—å", min_value=0.1, value=10.0, step=0.1)
show_snap = st.sidebar.checkbox("–ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å–µ—Ç–∫–µ (snap-to-grid)", value=True)
grid_mm = st.sidebar.number_input("–®–∞–≥ —Å–µ—Ç–∫–∏ (–º–º)", min_value=5, value=100, step=5)

# ‚Äî Sidebar: –ö–≤–∞—Ä—Ç–∏—Ä–æ–≥—Ä–∞—Ñ–∏—è ‚Äî
st.sidebar.header("üè† –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä")
types = ['–°—Ç—É–¥–∏—è','1–°','2–°','3–°','4–°']
percentages = {}
cols = st.sidebar.columns(2)
for i, t in enumerate(types):
    with cols[i % 2]:
        percentages[t] = st.slider(f"% {t}", 0, 100, 100//len(types), key=f"pct_{t}")
if sum(percentages.values()) != 100:
    st.sidebar.error(f"–°—É–º–º–∞ % –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 100% (—Å–µ–π—á–∞—Å {sum(percentages.values())}%)")
    st.stop()

st.sidebar.subheader("–î–∏–∞–ø–∞–∑–æ–Ω—ã –ø–ª–æ—â–∞–¥–µ–π (–º¬≤)")
areas = {}
for t in types:
    mn, mx = st.sidebar.slider(f"{t}", 1.0, 200.0, (20.0,50.0), key=f"area_{t}")
    areas[t] = (mn, mx)

# ‚Äî Sidebar: –ü—Ä–æ–µ–∫—Ç ‚Äî
st.sidebar.header("üíæ –ü—Ä–æ–µ–∫—Ç")
proj_name = st.sidebar.text_input("–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞ (JSON)", "plan.json")

# ==========================
#   CANVAS: –ß–ï–†–ß–ï–ù–ò–ï –ü–õ–ê–ù–ê
# ==========================

st.subheader("1Ô∏è‚É£ –ù–∞—Ä–∏—Å—É–π—Ç–µ –ø–ª–∞–Ω —ç—Ç–∞–∂–∞")
st.markdown("–ü–µ—Ä–≤—ã–π –ø–æ–ª–∏–≥–æ–Ω ‚Äî –≤–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç—É—Ä; –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî –∑–æ–Ω—ã –ú–û–ü.")
canvas_data = st_canvas(
        stroke_width=2,
        stroke_color='#000',
        fill_color='rgba(255,165,0,0.3)',
        background_color='#F0F0F0',
        drawing_mode='polygon',
        key='canvas2',
        width=800, height=600,
        initial_drawing=initial
    )
    )

# ==========================
#   –ü–û–õ–ò–ì–û–ù –≠–¢–ê–ñ–ê + –ú–û–ü
# ==========================

def snap(pt):
    x,y = pt
    if not show_snap: return (x,y)
    g = grid_mm/scale
    return (round(x/g)*g, round(y/g)*g)

raw = canvas_data.json_data or {}
objs = raw.get('objects', [])
polys = []
for o in objs:
    if o.get('type') == 'polygon':
        pts = [snap((p['x'],p['y'])) for p in o['points']]
        if len(pts) >= 3: polys.append(Polygon(pts))
if not polys:
    st.error("–ù–∞—Ä–∏—Å—É–π—Ç–µ –≤–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç—É—Ä!"); st.stop()
floor = polys[0]
for hole in polys[1:]:
    floor = floor.difference(hole)
# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤
minx,miny,maxx,maxy = floor.bounds
w_mm = (maxx-minx)*scale; h_mm = (maxy-miny)*scale
area_m2 = floor.area * scale**2 / 1e6
st.info(f"–ö–æ–Ω—Ç—É—Ä: {w_mm:.0f}√ó{h_mm:.0f} –º–º, –ø–ª–æ—â–∞–¥—å {area_m2:.2f} –º¬≤")

# ==========================
#   –§–£–ù–ö–¶–ò–ò –ù–ê–†–ï–ó–ö–ò
# ==========================

def split_poly(poly, target_px2, tol=1e-2):
    # –ì–ª–∞–≤–Ω–æ–µ: –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≥–ª–∞–≤–Ω–æ–π –æ—Å–∏ MRR
    mrr = poly.minimum_rotated_rectangle
    coords = list(mrr.exterior.coords)
    max_len = 0
    for i in range(len(coords)-1):
        x1,y1 = coords[i]; x2,y2 = coords[i+1]
        d = math.hypot(x2-x1, y2-y1)
        if d > max_len:
            max_len = d; major = ((x1,y1),(x2,y2))
    (x1,y1),(x2,y2) = major; ux, uy = (x2-x1)/max_len, (y2-y1)/max_len
    projs = [ux*x + uy*y for x,y in poly.exterior.coords]
    low, high = min(projs), max(projs)

    def make_cut(offset):
        mx,my = ux*offset, uy*offset; vx,vy = -uy,ux
        minx,miny,maxx,maxy = poly.bounds
        diag = math.hypot(maxx-minx, maxy-miny)*2
        return LineString([(mx+vx*diag, my+vy*diag),(mx-vx*diag, my-vy*diag)])

    for _ in range(30):
        mid = (low+high)/2; parts = split(poly, make_cut(mid))
        if len(parts) < 2:
            low = mid; continue
        # –í—ã–±–∏—Ä–∞–µ–º —Ç—É —á–∞—Å—Ç—å, —á–µ–π —Ü–µ–Ω—Ç—Ä –±–ª–∏–∂–µ –∫ low
        areas_list = []
        for part in parts:
            cx,cy = part.representative_point().coords[0]
            proj = ux*cx + uy*cy
            areas_list.append((proj, part))
        smaller = min(areas_list, key=lambda x: x[0])[1]; a = smaller.area
        if a > target_px2*(1+tol): high = mid
        elif a < target_px2*(1-tol): low = mid
        else:
            rem = [p for p in parts if not p.equals(smaller)]
            return smaller, (rem[0] if rem else None)

    parts = split(poly, make_cut((low+high)/2))
    parts = sorted(parts, key=lambda p: p.area)
    return parts[0], (parts[1] if len(parts)>1 else None)

# ==========================
#   –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ö–í–ê–†–¢–ò–†
# ==========================

st.subheader("2Ô∏è‚É£ –ü–æ–¥–±–æ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –≤—Å–µ–º—É –∑–¥–∞–Ω–∏—é")
if st.button("üöÄ –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã"):
    total_area = area_m2 * floors
    avg_area = {t:(areas[t][0]+areas[t][1])/2 for t in types}
    counts = {t: max(1,int(round(total_area*percentages[t]/100/avg_area[t]))) for t in types}
    per_floor = {i:{} for i in range(floors)}
    for t,c in counts.items():
        q,r = divmod(c, floors)
        for i in range(floors): per_floor[i][t] = q + (1 if i < r else 0)

    fl = st.slider("–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂", 1, floors, 1)
    targets = []
    for t,n in per_floor[fl-1].items():
        if n > 0:
            tot_t = total_area * percentages[t] / 100
            avg_t = tot_t / counts[t]
            px2 = avg_t * 1e6 / scale**2
            targets += [(t, px2)]*n

    # –†–∞–∑–º–µ—Ç–∫–∞
    avail = [floor]; placements = []
    for t,px2 in targets:
        avail.sort(key=lambda p: p.area, reverse=True)
        poly = avail.pop(0)
        apt, rem = split_poly(poly, px2)
        placements.append((t, apt))
        if rem and rem.area > 0: avail.append(rem)

    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —ç—Ç–∞–∂–∞
    fig, ax = plt.subplots(figsize=(8,6))
    cmap = {'–°—Ç—É–¥–∏—è':'#FFC107','1–°':'#8BC34A','2–°':'#03A9F4','3–°':'#E91E63','4–°':'#9C27B0'}
    for t, poly in placements:
        x,y = poly.exterior.xy
        ax.fill([xi*scale for xi in x], [yi*scale for yi in y], color=cmap[t], alpha=0.7, edgecolor='black')
    ax.set_aspect('equal'); ax.axis('off')
    st.pyplot(fig)

    # –û—Ç—á–µ—Ç
    df = pd.DataFrame([{'–≠—Ç–∞–∂':i+1,'–¢–∏–ø':t,'–ö–æ–ª-–≤–æ':per_floor[i][t]} for i in range(floors) for t in types])
    st.subheader("3Ô∏è‚É£ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —ç—Ç–∞–∂–∞–º")
    st.dataframe(df)
    st.sidebar.download_button("üì• –°–∫–∞—á–∞—Ç—å CSV", df.to_csv(index=False), file_name='report.csv', mime='text/csv')
