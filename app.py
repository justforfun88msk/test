import streamlit as st
from streamlit.components.v1 import html
from shapely.geometry import Polygon, LineString
from shapely.ops import split
import matplotlib.pyplot as plt
import pandas as pd
import math
import json

# ==========================""" + """
#   –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò UI
# ==========================

st.set_page_config(layout="wide", page_title="–ö–≤–∞—Ä—Ç–∏—Ä–æ–≥—Ä–∞—Ñ–∏—è")
st.title("üìê –ö–≤–∞—Ä—Ç–∏—Ä–æ–≥—Ä–∞—Ñ–∏—è Architect Edition")

# ‚Äî Sidebar: –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî
st.sidebar.header("üè¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–¥–∞–Ω–∏—è –∏ —Å–µ—Ç–∫–∏")
floors = st.sidebar.number_input("–≠—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ", min_value=1, value=10)
scale = st.sidebar.number_input("–º–º –Ω–∞ –ø–∏–∫—Å–µ–ª—å", min_value=0.1, value=10.0, step=0.1)
show_snap = st.sidebar.checkbox("–ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å–µ—Ç–∫–µ", value=True)
grid_mm = st.sidebar.number_input("–®–∞–≥ —Å–µ—Ç–∫–∏ (–º–º)", min_value=5, value=100, step=5)

# ‚Äî Sidebar: –ö–≤–∞—Ä—Ç–∏—Ä–æ–≥—Ä–∞—Ñ–∏—è ‚Äî
st.sidebar.header("üè† –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä")
types = ['–°—Ç—É–¥–∏—è', '1–°', '2–°', '3–°', '4–°']
percentages = {}
st.sidebar.markdown("### –°—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤")
total_percent = 0
cols = st.sidebar.columns(2)
for i, t in enumerate(types):
    with(cols[i % 2]):
        percentages[t] = st.slider(f"% {t}", 0, 100, 100 // len(types), key=f"pct_{t}")
        total_percent += percentages[t]
color = "green" if abs(total_percent - 100) <= 0.01 else "red"
st.sidebar.markdown(f"<p style='color:{color};'>–°—É–º–º–∞: {total_percent:.1f}%</p>", unsafe_allow_html=True)
if abs(total_percent - 100) > 0.01:
    st.sidebar.error(f"–°—É–º–º–∞ % –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 100% (—Å–µ–π—á–∞—Å {total_percent:.1f}%)")
    st.stop()

st.sidebar.subheader("–î–∏–∞–ø–∞–∑–æ–Ω—ã –ø–ª–æ—â–∞–¥–µ–π (–º¬≤)")
areas = {}
for t in types:
    mn, mx = st.sidebar.slider(f"{t}", 1.0, 200.0, (20.0, 50.0), key=f"area_{t}")
    areas[t] = (mn, mx)

# ‚Äî Sidebar: –ü—Ä–æ–µ–∫—Ç ‚Äî
st.sidebar.header("üíæ –ü—Ä–æ–µ–∫—Ç")
proj_name = st.sidebar.text_input("–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞ (JSON)", "plan.json")

# ==========================
#   HTML5 CANVAS –î–õ–Ø –†–ò–°–û–í–ê–ù–ò–Ø
# ==========================

st.subheader("1Ô∏è‚É£ –ù–∞—Ä–∏—Å—É–π—Ç–µ –ø–ª–∞–Ω —ç—Ç–∞–∂–∞")
st.markdown("–†–∏—Å—É–π—Ç–µ —Å—Ç–µ–Ω—ã, —É–¥–µ—Ä–∂–∏–≤–∞—è –ª–µ–≤—É—é –∫–Ω–æ–ø–∫—É –º—ã—à–∏. –£–≥–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è –Ω–∞ 90¬∞. –†–∞–∑–º–µ—Ä—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –º–º.")

canvas_width, canvas_height = 800, 600
grid_size_px = grid_mm / scale

canvas_html = f"""
<canvas id="canvas" width="{canvas_width}" height="{canvas_height}" style="border:1px solid black;"></canvas>
<div id="coords">–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: (0, 0)</div>
<script>
    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext('2d');
    const gridSize = {grid_size_px};
    let points = [];
    let isDrawing = false;
    let lastPoint = null;

    // –†–∏—Å—É–µ–º —Å–µ—Ç–∫—É
    ctx.strokeStyle = 'gray';
    ctx.lineWidth = 0.5;
    for (let x = 0; x <= canvas.width; x += gridSize) {{
        ctx.beginPath();
        ctx.moveTo(x, 0);
        ctx.lineTo(x, canvas.height);
        ctx.stroke();
    }}
    for (let y = 0; y <= canvas.height; y += gridSize) {{
        ctx.beginPath();
        ctx.moveTo(0, y);
        ctx.lineTo(canvas.width, y);
        ctx.stroke();
    }}

    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å–µ—Ç–∫–µ
    function snapToGrid(x, y) {{
        return [Math.round(x / gridSize) * gridSize, Math.round(y / gridSize) * gridSize];
    }}

    // –§—É–Ω–∫—Ü–∏—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —É–≥–ª–æ–≤ –Ω–∞ 90¬∞
    function alignTo90Degrees(currX, currY, prevX, prevY) {{
        const dx = currX - prevX;
        const dy = currY - prevY;
        if (Math.abs(dx) > Math.abs(dy)) {{
            return [currX, prevY];
        }} else {{
            return [prevX, currY];
        }}
    }}

    // –†–∏—Å–æ–≤–∞–Ω–∏–µ –ª–∏–Ω–∏–∏ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
    function drawLineWithDimensions(startX, startY, endX, endY) {{
        ctx.beginPath();
        ctx.moveTo(startX, startY);
        ctx.lineTo(endX, endY);
        ctx.strokeStyle = 'black';
        ctx.lineWidth = 2;
        ctx.stroke();

        // –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏–Ω—É –≤ –º–º
        const lengthPx = Math.sqrt(Math.pow(endX - startX, 2) + Math.pow(endY - startY, 2));
        const lengthMm = lengthPx * {scale};
        const midX = (startX + endX) / 2;
        const midY = (startY + endY) / 2;
        ctx.font = '12px Arial';
        ctx.fillStyle = 'black';
        ctx.fillText(`${{lengthMm.toFixed(0)}} –º–º`, midX, midY);
    }}

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    canvas.addEventListener('mousedown', (e) => {{
        if (e.button === 0) {{ // –õ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞
            isDrawing = true;
            const [x, y] = snapToGrid(e.offsetX, e.offsetY);
            if (lastPoint) {{
                const [alignedX, alignedY] = alignTo90Degrees(x, y, lastPoint[0], lastPoint[1]);
                points.push([alignedX, alignedY]);
                drawLineWithDimensions(lastPoint[0], lastPoint[1], alignedX, alignedY);
            }} else {{
                points.push([x, y]);
            }}
            lastPoint = points[points.length - 1];
            document.getElementById('coords').innerText = `–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: (${{x}}, ${{y}})`;
        }}
    }});

    canvas.addEventListener('mousemove', (e) => {{
        if (isDrawing && lastPoint) {{
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–µ—Ç–∫—É
            ctx.strokeStyle = 'gray';
            ctx.lineWidth = 0.5;
            for (let x = 0; x <= canvas.width; x += gridSize) {{
                ctx.beginPath();
                ctx.moveTo(x, 0);
                ctx.lineTo(x, canvas.height);
                ctx.stroke();
            }}
            for (let y = 0; y <= canvas.height; y += gridSize) {{
                ctx.beginPath();
                ctx.moveTo(0, y);
                ctx.lineTo(canvas.width, y);
                ctx.stroke();
            }}
            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Å–µ –ª–∏–Ω–∏–∏
            for (let i = 1; i < points.length; i++) {{
                drawLineWithDimensions(points[i-1][0], points[i-1][1], points[i][0], points[i][1]);
            }}
            // –†–∏—Å—É–µ–º —Ç–µ–∫—É—â—É—é –ª–∏–Ω–∏—é
            const [x, y] = snapToGrid(e.offsetX, e.offsetY);
            const [alignedX, alignedY] = alignTo90Degrees(x, y, lastPoint[0], lastPoint[1]);
            drawLineWithDimensions(lastPoint[0], lastPoint[1], alignedX, alignedY);
            document.getElementById('coords').innerText = `–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: (${{x}}, ${{y}})`;
        }}
    }});

    canvas.addEventListener('mouseup', (e) => {{
        if (e.button === 0) {{
            isDrawing = false;
        }}
    }});

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    function saveDrawing() {{
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –≤ Python —á–µ—Ä–µ–∑ sessionStorage
        sessionStorage.setItem('canvas_points', JSON.stringify(points));
    }}
</script>
<button onclick="saveDrawing()">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω</button>
"""

# –í—Å—Ç–∞–≤–ª—è–µ–º HTML5 Canvas
html(canvas_html, height=700)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–∫–∏ –∏–∑ sessionStorage (—á–µ—Ä–µ–∑ JavaScript)
st.markdown("–ù–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω' –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.")
if 'canvas_points' not in st.session_state:
    st.session_state.canvas_points = []
canvas_points = st.session_state.get('canvas_points', [])

# JavaScript –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Streamlit
st.markdown("""
<script>
    if (sessionStorage.getItem('canvas_points')) {
        const points = JSON.parse(sessionStorage.getItem('canvas_points'));
        const event = new CustomEvent('streamlit:componentData', {detail: points});
        window.dispatchEvent(event);
    }
</script>
""", unsafe_allow_html=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–∏–≥–æ–Ω–æ–≤
polys = []
if canvas_points:
    try:
        if len(canvas_points) >= 3:
            poly = Polygon(canvas_points)
            if not poly.is_valid:
                st.error("–ü–æ–ª–∏–≥–æ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∞–º–æ–ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è).")
                st.stop()
            polys.append(poly)
        else:
            st.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–µ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–∏–≥–æ–Ω–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3).")
            st.stop()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª–∏–≥–æ–Ω–∞: {str(e)}")
        st.stop()

if not polys:
    st.error("–ù–∞—Ä–∏—Å—É–π—Ç–µ –≤–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç—É—Ä –∏ –Ω–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞–Ω'!")
    st.stop()

with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–∏–≥–æ–Ω–æ–≤..."):
    floor = polys[0]
    for hole in polys[1:]:
        try:
            if hole.is_valid and floor.is_valid:
                floor = floor.difference(hole)
            else:
                st.error("–û–¥–∏–Ω –∏–∑ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ (–≤–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç—É—Ä –∏–ª–∏ –ú–û–ü) –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
                st.stop()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Ç–∞–Ω–∏–∏ –∑–æ–Ω –ú–û–ü: {str(e)}")
            st.stop()

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —ç—Ç–∞–∂–∞
minx, miny, maxx, maxy = floor.bounds
w_mm = (maxx - minx) * scale
h_mm = (maxy - miny) * scale
area_m2 = floor.area * scale**2 / 1e6
st.info(f"–ö–æ–Ω—Ç—É—Ä: {w_mm:.0f}√ó{h_mm:.0f} –º–º, –ø–ª–æ—â–∞–¥—å {area_m2:.2f} –º¬≤")

# ==========================
#   –§–£–ù–ö–¶–ò–ò –ù–ê–†–ï–ó–ö–ò
# ==========================

def split_poly(poly, target_px2, tol=0.05):
    mrr = poly.minimum_rotated_rectangle
    coords = list(mrr.exterior.coords)
    max_len = 0
    for i in range(len(coords) - 1):
        x1, y1 = coords[i]
        x2, y2 = coords[i + 1]
        d = math.hypot(x2 - x1, y2 - y1)
        if d > max_len:
            max_len = d
            major = ((x1, y1), (x2, y2))
    (x1, y1), (x2, y2) = major
    ux, uy = (x2 - x1) / max_len, (y2 - y1) / max_len
    projs = [ux * x + uy * y for x, y in poly.exterior.coords]
    low, high = min(projs), max(projs)

    def make_cut(offset):
        mx, my = ux * offset, uy * offset
        vx, vy = -uy, ux
        minx, miny, maxx, maxy = poly.bounds
        diag = math.hypot(maxx - minx, maxy - miny) * 2
        return LineString([(mx + vx * diag, my + vy * diag), (mx - vx * diag, my - vy * diag)])

    for _ in range(30):
        mid = (low + high) / 2
        parts = split(poly, make_cut(mid))
        if not parts.geoms:
            low = mid
            continue
        parts = list(parts.geoms)
        if len(parts) < 2:
            low = mid
            continue
        if len(parts) > 2:
            st.warning("–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–∞ –¥–∞–ª–æ –±–æ–ª–µ–µ –¥–≤—É—Ö —á–∞—Å—Ç–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è.")
            parts = parts[:2]
        areas_list = []
        for part in parts:
            cx, cy = part.representative_point().coords[0]
            proj = ux * cx + uy * cy
            areas_list.append((proj, part))
        smaller = min(areas_list, key=lambda x: x[0])[1]
        a = smaller.area
        if a > target_px2 * (1 + tol):
            high = mid
        elif a < target_px2 * (1 - tol):
            low = mid
        else:
            rem = [p for p in parts if not p.equals(smaller)]
            return smaller, (rem[0] if rem else None)

    parts = split(poly, make_cut((low + high) / 2))
    if not parts.geoms:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ–ª–∏–≥–æ–Ω.")
        st.stop()
    parts = sorted(list(parts.geoms), key=lambda p: p.area)
    return parts[0], (parts[1] if len(parts) > 1 else None)

# ==========================
#   –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ö–í–ê–†–¢–ò–†
# ==========================

st.subheader("2Ô∏è‚É£ –ü–æ–¥–±–æ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –≤—Å–µ–º—É –∑–¥–∞–Ω–∏—é")
if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä–æ–≥—Ä–∞—Ñ–∏—é"):
    total_area = area_m2 * floors
    avg_area = {t: (areas[t][0] + areas[t][1]) / 2 for t in types}
    counts = {t: max(1, int(round(total_area * percentages[t] / 100 / avg_area[t]))) for t in types}
    per_floor = {i: {} for i in range(floors)}
    for t, c in counts.items():
        q, r = divmod(c, floors)
        for i in range(floors):
            per_floor[i][t] = q + (1 if i < r else 0)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ö–µ–º –¥–ª—è –≤—Å–µ—Ö —ç—Ç–∞–∂–µ–π
    st.subheader("3Ô∏è‚É£ –°—Ö–µ–º—ã —ç—Ç–∞–∂–µ–π")
    floor_placements = {}
    for fl in range(1, floors + 1):
        targets = []
        for t, n in per_floor[fl - 1].items():
            if n > 0:
                tot_t = total_area * percentages[t] / 100
                avg_t = tot_t / counts[t]
                px2 = avg_t * 1e6 / scale**2
                targets += [(t, px2)] * n

        # –†–∞–∑–º–µ—Ç–∫–∞ —ç—Ç–∞–∂–∞
        avail = [floor]
        placements = []
        for t, px2 in targets:
            avail.sort(key=lambda p: p.area, reverse=True)
            if not avail:
                st.warning(f"–≠—Ç–∞–∂ {fl}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤—Å–µ—Ö –∫–≤–∞—Ä—Ç–∏—Ä.")
                break
            poly = avail.pop(0)
            apt, rem = split_poly(poly, px2)
            placements.append((t, apt))
            if rem and rem.area > 0.01 * px2:
                avail.append(rem)

        floor_placements[fl] = placements

        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —ç—Ç–∞–∂–∞
        st.markdown(f"#### –≠—Ç–∞–∂ {fl}")
        fig, ax = plt.subplots(figsize=(8, 6))
        cmap = {'–°—Ç—É–¥–∏—è': '#FFC107', '1–°': '#8BC34A', '2–°': '#03A9F4', '3–°': '#E91E63', '4–°': '#9C27B0'}
        for t, poly in placements:
            x, y = poly.exterior.xy
            ax.fill([xi * scale for xi in x], [yi * scale for yi in y], color=cmap[t], alpha=0.7, edgecolor='black')
            # –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏ –ø–ª–æ—â–∞–¥—å—é
            minx, miny, maxx, maxy = poly.bounds
            w_mm = (maxx - minx) * scale
            h_mm = (maxy - miny) * scale
            area_m2 = poly.area * scale**2 / 1e6
            cx, cy = poly.representative_point().xy
            ax.text(cx[0] * scale, cy[0] * scale, f"{t}\n{w_mm:.0f}√ó{h_mm:.0f} –º–º\n{area_m2:.2f} –º¬≤",
                    ha='center', va='center', fontsize=8, bbox=dict(facecolor='white', alpha=0.8))
        ax.set_aspect('equal')
        ax.axis('off')
        st.pyplot(fig)
        plt.close(fig)

    # –û—Ç—á–µ—Ç
    df = pd.DataFrame([{'–≠—Ç–∞–∂': i + 1, '–¢–∏–ø': t, '–ö–æ–ª-–≤–æ': per_floor[i][t]} for i in range(floors) for t in types])
    st.subheader("4Ô∏è‚É£ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —ç—Ç–∞–∂–∞–º")
    st.dataframe(df)
    st.sidebar.download_button("üì• –°–∫–∞—á–∞—Ç—å CSV", df.to_csv(index=False), file_name='report.csv', mime='text/csv')
