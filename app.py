# -*- coding: utf-8 -*-
""" –ö–≤–∞—Ä—Ç–∏—Ä–æ–≥—Ä–∞—Ñ–∏—è ‚Äî –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ (Architect Edition)
=============================================================================
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è 2025-06-17.
–û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
1. –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
2. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
3. –£–ª—É—á—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
4. –†–∞—Å—à–∏—Ä–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∞
5. –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç –∫—Ä–∞–µ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤
"""

import math
import json
import random
import base64
from io import BytesIO
from typing import Dict, List, Tuple, Optional
import streamlit as st
from streamlit_drawable_canvas import st_canvas
from shapely.geometry import Polygon, LineString, MultiPolygon
from shapely.ops import split
import matplotlib.pyplot as plt
import pandas as pd
from PIL import Image, ImageDraw

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ö–≤–∞—Ä—Ç–∏—Ä–æ–≥—Ä–∞—Ñ–∏—è Architect Edition",
    layout="wide",
    initial_sidebar_state="expanded",
)
st.title("üìê –ö–≤–∞—Ä—Ç–∏—Ä–æ–≥—Ä–∞—Ñ–∏—è ‚Äî Architect Edition (improved)")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Å–∞–π–¥–±–∞—Ä–µ
st.sidebar.header("üè¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–¥–∞–Ω–∏—è –∏ —Å–µ—Ç–∫–∏")
floors: int = st.sidebar.number_input("–≠—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ", min_value=1, value=10)
scale_mm_px: float = st.sidebar.number_input("–ú–∏–ª–ª–∏–º–µ—Ç—Ä–æ–≤ –≤ 1 –ø–∏–∫—Å–µ–ª–µ", min_value=0.1, value=10.0, step=0.1)
grid_step_mm: int = st.sidebar.number_input("–®–∞–≥ —Å–µ—Ç–∫–∏, –º–º", min_value=5, value=100, step=5)
show_snap: bool = st.sidebar.checkbox("–ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å—ç—Ç–∫–µ", value=True)

# –¢–∏–ø—ã –∫–≤–∞—Ä—Ç–∏—Ä –∏ —Ü–≤–µ—Ç–∞
APT_TYPES = ["–°—Ç—É–¥–∏—è", "1–°", "2–°", "3–°", "4–°"]
COLORS = {
    "–°—Ç—É–¥–∏—è": "#FFC107",
    "1–°": "#8BC34A",
    "2–°": "#03A9F4",
    "3–°": "#E91E63",
    "4–°": "#9C27B0",
}

# –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
def validate_apartment_percentages(percentages: Dict[str, float]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤"""
    total = sum(percentages.values())
    return abs(total - 100.0) < 0.01

def apartment_percentages() -> Dict[str, float]:
    """–°–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    inputs = []
    for t in APT_TYPES[:-1]:
        val = st.sidebar.number_input(
            f"% {t}", 0.0, 100.0, 100.0 / len(APT_TYPES), step=1.0, key=f"pct_{t}"
        )
        inputs.append(val)
    
    sum_inputs = sum(inputs)
    if sum_inputs > 100:
        st.sidebar.error("–°—É–º–º–∞ –ø–µ—Ä–≤—ã—Ö —á–µ—Ç—ã—Ä—ë—Ö —Ç–∏–ø–æ–≤ > 100 %. –£–º–µ–Ω—å—à–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è.")
        return {}
    
    last_val = 100.0 - sum_inputs
    st.sidebar.markdown(f"**% {APT_TYPES[-1]}:** {last_val:.1f} (–∞–≤—Ç–æ)")
    return {t: v for t, v in zip(APT_TYPES, inputs + [last_val])}

# –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
percentages: Dict[str, float] = apartment_percentages()

# –î–∏–∞–ø–∞–∑–æ–Ω—ã –ø–ª–æ—â–∞–¥–µ–π
st.sidebar.subheader("üìè –î–∏–∞–ø–∞–∑–æ–Ω—ã –ø–ª–æ—â–∞–¥–µ–π (–º¬≤)")
AREA_RANGES: Dict[str, Tuple[float, float]] = {}
for t in APT_TYPES:
    AREA_RANGES[t] = st.sidebar.slider(
        t, 10.0, 200.0, (20.0, 50.0), key=f"area_{t}"
    )

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
st.sidebar.header("üíæ –§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞")
project_name: str = st.sidebar.text_input("–ò–º—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞", "plan.json")

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∫–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
@st.cache_data(show_spinner=False, ttl=3600)
def make_grid_png(width: int, height: int, step_px: float) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ PNG —Å–µ—Ç–∫–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    if step_px < 5:
        img = Image.new("RGBA", (width, height), (255, 255, 255, 0))
        buffer = BytesIO()
        img.save(buffer, format="PNG")
        return base64.b64encode(buffer.getvalue()).decode()
    
    img = Image.new("RGBA", (width, height), (255, 255, 255, 0))
    draw = ImageDraw.Draw(img)
    for x in range(0, width, int(step_px)):
        draw.line([(x, 0), (x, height)], fill=(227, 227, 227, 255))
    for y in range(0, height, int(step_px)):
        draw.line([(0, y), (width, y)], fill=(227, 227, 227, 255))
    buffer = BytesIO()
    img.save(buffer, format="PNG")
    return base64.b64encode(buffer.getvalue()).decode()

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç—É—Ä —ç—Ç–∞–∂–∞
st.subheader("1Ô∏è‚É£ –ù–∞—Ä–∏—Å—É–π—Ç–µ –≤–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç—É—Ä —ç—Ç–∞–∂–∞")
CANVAS_WIDTH, CANVAS_HEIGHT = 800, 600
GRID_PX = grid_step_mm / scale_mm_px

def _extract_user_polygons(json_data: dict) -> List[Polygon]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–∏–≥–æ–Ω–æ–≤ –∏–∑ JSON —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        polys = []
        if not json_data:
            return polys
        
        for obj in json_data.get("objects", []):
            pts: Optional[List[Tuple[float, float]]] = None
            if obj.get("type") == "path":
                pts = [(cmd[1], cmd[2]) for cmd in obj["path"] if cmd[0] in ("M", "L")]
            elif obj.get("type") == "polygon":
                pts = [(p[0], p[1]) for p in obj["points"]]
            
            if pts and len(pts) >= 3:
                if show_snap:
                    pts = [(round(x / GRID_PX) * GRID_PX, round(y / GRID_PX) * GRID_PX) 
                          for x, y in pts]
                polys.append(Polygon(pts))
        return polys
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {str(e)}")
        return []

# –°–æ–∑–¥–∞–Ω–∏–µ —Ö–æ–ª—Å—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç—É—Ä–∞
bg_png_b64 = make_grid_png(CANVAS_WIDTH, CANVAS_HEIGHT, GRID_PX)
contour_json = st_canvas(
    fill_color="rgba(0, 0, 0, 0)",
    stroke_width=2,
    stroke_color="#000000",
    background_image=f"data:image/png;base64,{bg_png_b64}",
    height=CANVAS_HEIGHT,
    width=CANVAS_WIDTH,
    drawing_mode="polygon",
    key="contour_canvas",
)
st.caption("–ù–∞—Ä–∏—Å—É–π—Ç–µ **–æ–¥–∏–Ω** –∑–∞–º–∫–Ω—É—Ç—ã–π –ø–æ–ª–∏–≥–æ–Ω. –ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if "contour_poly" not in st.session_state:
    st.session_state.contour_poly = None

def has_valid_polys(json_data: dict) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤"""
    return bool(_extract_user_polygons(json_data))

# –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç—É—Ä–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
save_contour = st.button("üìå –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç—É—Ä", disabled=not has_valid_polys(contour_json.json_data))
if save_contour:
    try:
        polygons_px = _extract_user_polygons(contour_json.json_data)
        if not polygons_px:
            st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤.")
        else:
            if len(polygons_px) > 1:
                st.warning("–ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π.")
            st.session_state.contour_poly = polygons_px[0]
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç—É—Ä–∞: {str(e)}")

# –ó–æ–Ω—ã –ú–û–ü
st.subheader("2Ô∏è‚É£ –ù–∞—Ä–∏—Å—É–π—Ç–µ –∑–æ–Ω—ã –ú–û–ü (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
holes_json = st_canvas(
    fill_color="rgba(255,0,0,0.3)",
    stroke_width=2,
    stroke_color="#ff0000",
    background_image=f"data:image/png;base64,{bg_png_b64}",
    height=CANVAS_HEIGHT,
    width=CANVAS_WIDTH,
    drawing_mode="polygon",
    key="holes_canvas",
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ú–û–ü
if "holes_polys" not in st.session_state:
    st.session_state.holes_polys: List[Polygon] = []

# –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ú–û–ü
add_hole = st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ú–û–ü", disabled=not has_valid_polys(holes_json.json_data))
if add_hole:
    try:
        new_holes = _extract_user_polygons(holes_json.json_data)
        st.session_state.holes_polys.extend(new_holes)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ú–û–ü: {str(e)}")

# –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ú–û–ü
if st.session_state.holes_polys:
    if st.button("üóë –û—á–∏—Å—Ç–∏—Ç—å –ú–û–ü"):
        st.session_state.holes_polys.clear()

# –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–∏–≥–æ–Ω–æ–≤
def validate_floor_polygon() -> Tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–∏–≥–æ–Ω–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ"""
    if st.session_state.contour_poly is None:
        return False, "–ù–∞—Ä–∏—Å—É–π—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç—É—Ä"
    
    outer = st.session_state.contour_poly
    if not outer.is_valid or not outer.is_simple:
        return False, "–í–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç—É—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω (—Å–∞–º–æ–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –∏ —Ç. –ø.)"
    
    floor_poly = outer
    for h in st.session_state.holes_polys:
        if h.is_valid:
            floor_poly = floor_poly.difference(h)
    
    if floor_poly.is_empty:
        return False, "–ü–æ—Å–ª–µ –≤—ã—á–∏—Ç–∞–Ω–∏—è –ú–û–ü –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø–ª–æ—â–∞–¥–∏ —ç—Ç–∞–∂–∞!"
    
    return True, ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
is_valid, error_msg = validate_floor_polygon()
if not is_valid:
    st.error(error_msg)
    st.stop()

# –ú–µ—Ç—Ä–∏–∫–∞ —ç—Ç–∞–∂–∞
minx, miny, maxx, maxy = floor_poly.bounds
width_mm = (maxx - minx) * scale_mm_px
height_mm = (maxy - miny) * scale_mm_px
area_m2 = floor_poly.area * (scale_mm_px ** 2) / 1e6
st.success(f"–ö–æ–Ω—Ç—É—Ä: **{width_mm:.0f} √ó {height_mm:.0f} –º–º**, –ø–ª–æ—â–∞–¥—å **{area_m2:.2f} –º¬≤**")

# –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–∑–±–∏–µ–Ω–∏—è
@st.cache_data(show_spinner=False)
def split_poly(poly: Polygon, target_px2: float, tol: float = 0.05) -> Tuple[Polygon, Optional[Polygon]]:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–∑–±–∏–µ–Ω–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è"""
    try:
        mrr = poly.minimum_rotated_rectangle
        coords = list(mrr.exterior.coords)
        
        sides = []
        for i in range(len(coords) - 1):
            x1, y1 = coords[i]
            x2, y2 = coords[i + 1]
            length = math.hypot(x2 - x1, y2 - y1)
            sides.append(((x1, y1), (x2, y2), length))
        
        sides = sorted(sides, key=lambda s: s[2], reverse=True)
        
        for (p1, p2, len_side) in sides[:2]:
            ux, uy = (p2[0] - p1[0]) / len_side, (p2[1] - p1[1]) / len_side
            vx, vy = -uy, ux
            
            projs = [ux * x + uy * y for x, y in poly.exterior.coords]
            low, high = min(projs), max(projs)
            
            def make_cut(offset: float) -> LineString:
                mx, my = ux * offset, uy * offset
                minx_, miny_, maxx_, maxy_ = poly.bounds
                diag = math.hypot(maxx_ - minx_, maxy_ - miny_) * 2
                return LineString([(mx + vx * diag, my + vy * diag), 
                                 (mx - vx * diag, my - vy * diag)])
            
            for _ in range(40):
                mid = (low + high) / 2
                parts = split(poly, make_cut(mid))
                
                if len(parts.geoms) < 2:
                    low = mid
                    if abs(high - low) < 1e-3:
                        break
                    continue
                
                parts = list(parts.geoms)[:2]
                parts.sort(key=lambda p_: p_.area)
                smaller = parts[0]
                a = smaller.area
                
                if a > target_px2 * (1 + tol):
                    high = mid
                elif a < target_px2 * (1 - tol):
                    low = mid
                else:
                    return smaller, parts[1]
                
                if abs(high - low) < 1e-3:
                    break
        
        # fallback: –æ—Ç—Ä–µ–∑–∞–µ–º –ø–æ–ª–æ–≤–∏–Ω—É –ø–ª–æ—â–∞–¥–∏
        minx_, miny_, maxx_, maxy_ = poly.bounds
        parts = list(split(poly, LineString([(minx_, miny_), (maxx_, maxy_)])))
        parts.sort(key=lambda p_: p_.area)
        
        if len(parts) == 1:
            return parts[0], None
        return parts[0], parts[1]
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∏–µ–Ω–∏–∏ –ø–æ–ª–∏–≥–æ–Ω–∞: {str(e)}")
        return poly, None

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–∞—Ä—Ç–∏—Ä–æ–≥—Ä–∞—Ñ–∏–∏
st.subheader("3Ô∏è‚É£ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä–æ–≥—Ä–∞—Ñ–∏—é")
if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", disabled=(not percentages)):
    try:
        with st.spinner("–†–∞—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–≤–∞—Ä—Ç–∏—Ä‚Ä¶"):
            # –†–∞—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–≤–∞—Ä—Ç–∏—Ä
            avg_area = {t: sum(AREA_RANGES[t]) / 2 for t in APT_TYPES}
            total_build_area = area_m2 * floors
            counts_target = {
                t: max(1, round(total_build_area * percentages[t] / 100 / avg_area[t]))
                for t in APT_TYPES
            }
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —ç—Ç–∞–∂–∞–º
            per_floor: Dict[int, Dict[str, int]] = {f: {t: 0 for t in APT_TYPES} for f in range(floors)}
            for t, cnt in counts_target.items():
                q, r = divmod(cnt, floors)
                for f in range(floors):
                    per_floor[f][t] = q + (1 if f < r else 0)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        prog = st.progress(0, text="–ù–∞—Ä–µ–∑–∫–∞ —ç—Ç–∞–∂–µ–π‚Ä¶")
        floor_placements: Dict[int, List[Tuple[str, Polygon]]] = {}
        missing: Dict[str, int] = {t: 0 for t in APT_TYPES}
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —ç—Ç–∞–∂–∞–º
        for fl in range(floors):
            targets: List[Tuple[str, float]] = []
            for t, n in per_floor[fl].items():
                for _ in range(n):
                    m2 = random.uniform(*AREA_RANGES[t])
                    px2 = m2 * 1e6 / (scale_mm_px ** 2)
                    targets.append((t, px2))
            
            available: List[Polygon] = [floor_poly]
            placed: List[Tuple[str, Polygon]] = []
            
            for t, px2 in targets:
                available.sort(key=lambda p: p.area, reverse=True)
                if not available:
                    missing[t] += 1
                    continue
                
                largest = available.pop(0)
                apt, rem = split_poly(largest, px2)
                placed.append((t, apt))
                
                if rem and rem.area > 0.02 * px2:
                    available.append(rem)
            
            floor_placements[fl + 1] = placed
            prog.progress((fl + 1) / floors, text=f"–ì–æ—Ç–æ–≤–æ {fl+1}/{floors} —ç—Ç–∞–∂–µ–π")
        
        prog.empty()
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —ç—Ç–∞–∂–µ–π
        st.subheader("4Ô∏è‚É£ –ü–ª–∞–Ω—ã —ç—Ç–∞–∂–µ–π")
        for fl, placement in floor_placements.items():
            st.markdown(f"### –≠—Ç–∞–∂ {fl}")
            fig, ax = plt.subplots(figsize=(6, 5))
            
            for t, poly in placement:
                x, y = poly.exterior.xy
                ax.fill([xi * scale_mm_px for xi in x], [yi * scale_mm_px for yi in y],
                        color=COLORS[t], alpha=0.7, edgecolor="black", linewidth=1)
                cx, cy = poly.representative_point().xy
                area_m2_apt = poly.area * (scale_mm_px ** 2) / 1e6
                ax.text(cx[0] * scale_mm_px, cy[0] * scale_mm_px,
                        f"{t}\n{area_m2_apt:.1f} –º¬≤", ha="center", va="center", fontsize=8,
                        bbox=dict(boxstyle="round,pad=0.2", fc="white", ec="none", alpha=0.8))
            
            # –õ–µ–≥–µ–Ω–¥–∞
            for t, c in COLORS.items():
                ax.scatter([], [], color=c, label=t)
            ax.legend(loc="upper right", fontsize=8)
            
            # –õ–∏–Ω–µ–π–∫–∞ –º–∞—Å—à—Ç–∞–±–∞
            ax.plot([20, 20 + 5000 / scale_mm_px], [20, 20], lw=4, color="black")
            ax.text(20 + 2500 / scale_mm_px, 40, "5 –º", ha="center", va="bottom")
            
            ax.set_aspect("equal")
            ax.axis("off")
            st.pyplot(fig)
            plt.close(fig)
        
        # –û—Ç—á—ë—Ç
        st.subheader("5Ô∏è‚É£ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á—ë—Ç")
        rows = []
        for fl, placement in floor_placements.items():
            for t in APT_TYPES:
                qty = sum(1 for tp, _ in placement if tp == t)
                rows.append({"–≠—Ç–∞–∂": fl, "–¢–∏–ø": t, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": qty})
        
        df = pd.DataFrame(rows)
        st.dataframe(df, use_container_width=True)
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—Ä–∞–∑–º–µ—â—ë–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö
        if any(missing.values()):
            miss_txt = ", ".join(f"{t}: {n}" for t, n in missing.items() if n)
            st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å: {miss_txt}")
        
        # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        st.sidebar.download_button(
            "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç CSV",
            df.to_csv(index=False).encode("utf-8"),
            file_name="report.csv",
            mime="text/csv",
        )
        
        project_data = {
            "scale_mm_px": scale_mm_px,
            "grid_step_mm": grid_step_mm,
            "floors": floors,
            "percentages": percentages,
            "area_ranges": AREA_RANGES,
            "contour": json.loads(floor_poly.to_geojson()),
        }
        
        st.sidebar.download_button(
            "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–µ–∫—Ç JSON",
            json.dumps(project_data, ensure_ascii=False, indent=2).encode("utf-8"),
            file_name=project_name,
            mime="application/json",
        )
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–∞—Ä—Ç–∏—Ä–æ–≥—Ä–∞—Ñ–∏–∏: {str(e)}")
