# app.py

import streamlit as st
import sklearn
import warnings
import pandas as pd # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –∏–º–ø–æ—Ä—Ç pandas

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
import ui_steps
import ui_config
import ml_core
from utils import get_session_id

warnings.filterwarnings("ignore")

# --- –ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(page_title="Sminex ML", layout="wide", page_icon="ü§ñ")
st.markdown(f"<style>{ui_config.APP_CSS}</style>", unsafe_allow_html=True)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ ---
if "wizard_step" not in st.session_state:
    st.session_state.wizard_step = 0 # 0 - –î–æ–º–∞—à–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

# --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ ---
st.markdown(
    f"""
    <div style="display: flex; align-items: baseline; justify-content: space-between;">
        <h1 style="margin-bottom:0;">
            <b>Sminex ML</b>
            <span style="color:gray; font-size:0.4em; margin-left: 10px;">
                AutoML {ui_config.APP_VERSION}
            </span>
        </h1>
        <span style="font-size: 0.8em; color: #666;">by Charikov</span>
    </div>
    """,
    unsafe_allow_html=True
)
st.caption("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ ‚Üí –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∑–∞–¥–∞—á—É ‚Üí –ü–æ–ª—É—á–∏—Ç–µ –ª—É—á—à—É—é –º–æ–¥–µ–ª—å ‚Üí –°–¥–µ–ª–∞–π—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ ‚Üí –ù–∞–π–¥–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

# --- –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é (Sidebar) –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ ---
with st.sidebar:
    st.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
    steps = {
        "üè† –î–æ–º–∞—à–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞": 0,
        "üìÅ 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö": 1,
        "üéØ 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞—á–∏": 2,
        "ü§ñ 3. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π": 3,
        "üìä 4. –ê–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–∏": 4,
        "üîÆ 5. –ü—Ä–æ–≥–Ω–æ–∑": 5,
        "‚öôÔ∏è 6. –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä": 6,
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —à–∞–≥
    max_unlocked_step = 0
    if 'train_df' in st.session_state: max_unlocked_step = 1
    if 'target' in st.session_state: max_unlocked_step = 2
    if 'leaderboard' in st.session_state: max_unlocked_step = 3
    if 'fitted_pipe' in st.session_state: max_unlocked_step = 6 # –í—Å–µ —à–∞–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã

    for step_name, step_num in steps.items():
        is_disabled = step_num > max_unlocked_step and step_num > 0
        if st.button(step_name, key=f"sidebar_step_{step_num}", use_container_width=True, disabled=is_disabled):
            st.session_state.wizard_step = step_num
            st.rerun()

    st.markdown("---")
    st.caption(f"–í–µ—Ä—Å–∏—è: {ui_config.APP_VERSION}")
    st.caption(f"sklearn: {sklearn.__version__}")
    st.caption(f"ID —Å–µ—Å—Å–∏–∏: {get_session_id()[:8]}")

# --- –õ–∏–ø–∫–∞—è –ø–∞–Ω–µ–ª—å —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º ---
with st.container():
    st.markdown('<div class="sticky-bar">', unsafe_allow_html=True)
    ds_shape = st.session_state.get("train_df", pd.DataFrame()).shape
    ds_info = f"{ds_shape[0]}√ó{ds_shape[1]}" if ds_shape[0] > 0 else "–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
    
    badges = [
        f'<span class="badge">–î–∞—Ç–∞—Å–µ—Ç: <b>{ds_info}</b></span>',
        f'<span class="badge">Target: <b>{st.session_state.get("target", "‚Äî")}</b></span>',
        f'<span class="badge">–¢–∏–ø: <b>{st.session_state.get("task_type", "‚Äî")}</b></span>',
        f'<span class="badge">–ú–æ–¥–µ–ª—å: <b>{st.session_state.get("active_model_name", "‚Äî")}</b></span>',
    ]
    st.markdown(" ".join(badges), unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)
    st.markdown("<br>", unsafe_allow_html=True)

# --- –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä (Router) –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ —à–∞–≥–∞ ---
current_step = st.session_state.wizard_step

if current_step == 0:
    ui_steps.render_step0_home()
elif current_step == 1:
    ui_steps.render_step1_upload()
elif current_step == 2:
    ui_steps.render_step2_setup()
elif current_step == 3:
    ui_steps.render_step3_training()
elif current_step == 4:
    ui_steps.render_step4_analysis()
elif current_step == 5:
    ui_steps.render_step5_predict()
elif current_step == 6:
    ui_steps.render_step6_calculator()
else:
    st.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.")
    st.session_state.wizard_step = 0
    st.rerun()
