# -*- coding: utf-8 -*-
"""
üìê –ö–≤–∞—Ä—Ç–∏—Ä–æ–≥—Ä–∞—Ñ–∏—è Architect Edition ‚Äî –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ—ç—Ç–∞–∂–Ω–æ–π –∫–≤–∞—Ä—Ç–∏—Ä–æ–≥—Ä–∞—Ñ–∏–∏ —Å —É—á—ë—Ç–æ–º –ú–û–ü–æ–≤ –∏ —Å–µ—Ç–∫–∏
"""

import streamlit as st
from streamlit_drawable_canvas import st_canvas
from shapely.geometry import Polygon, MultiPolygon
from shapely.ops import unary_union
import matplotlib.pyplot as plt
from io import BytesIO
import pandas as pd
import random
from PIL import Image, ImageDraw

# ==== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ====
SCALE_CM_PER_CELL = 10   # 10 —Å–º = 1 –∫–ª–µ—Ç–∫–∞
CELL_SIZE_PX = 20        # —Ä–∞–∑–º–µ—Ä –∫–ª–µ—Ç–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –≤ –ø–∏–∫—Å–µ–ª—è—Ö

# ==== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ====
st.set_page_config(page_title="–ö–≤–∞—Ä—Ç–∏—Ä–æ–≥—Ä–∞—Ñ–∏—è Architect Edition", layout="wide")
st.title("üìê –ö–≤–∞—Ä—Ç–∏—Ä–æ–≥—Ä–∞—Ñ–∏—è ‚Äî Architect Edition")

# ==== –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–¥–∞–Ω–∏—è ====
st.sidebar.header("üè¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–¥–∞–Ω–∏—è")
floors = st.sidebar.number_input("–≠—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ", min_value=1, value=23)
floor_width_m = st.sidebar.number_input("–®–∏—Ä–∏–Ω–∞ —ç—Ç–∞–∂–∞ (–º)", min_value=1.0, value=10.5)
floor_length_m = st.sidebar.number_input("–î–ª–∏–Ω–∞ —ç—Ç–∞–∂–∞ (–º)", min_value=1.0, value=72.0)

# ==== –†–∞—Å—á—ë—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–∞–Ω–≤—ã ====
grid_cols = int((floor_length_m * 100) / SCALE_CM_PER_CELL)
grid_rows = int((floor_width_m * 100) / SCALE_CM_PER_CELL)
canvas_width = grid_cols * CELL_SIZE_PX
canvas_height = grid_rows * CELL_SIZE_PX

# ==== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ—Ç–∫–∏ ====
def generate_grid_image(width_px, height_px, cell_size):
    img = Image.new("RGB", (width_px, height_px), "white")
    draw = ImageDraw.Draw(img)
    for x in range(0, width_px, cell_size):
        draw.line([(x, 0), (x, height_px)], fill="#DDD")
    for y in range(0, height_px, cell_size):
        draw.line([(0, y), (width_px, y)], fill="#DDD")
    return img

grid_img = generate_grid_image(canvas_width, canvas_height, CELL_SIZE_PX)

# ==== –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–≤–∞—Ä—Ç–∏—Ä ====
st.sidebar.header("üèò –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∫–≤–∞—Ä—Ç–∏—Ä (%)")
percent_distribution = {
    "–°—Ç—É–¥–∏—è": st.sidebar.slider("–°—Ç—É–¥–∏–∏", 0.0, 100.0, 1.4),
    "1-–∫–æ–º–Ω": st.sidebar.slider("1-–∫–æ–º–Ω", 0.0, 100.0, 34.6),
    "2-–∫–æ–º–Ω": st.sidebar.slider("2-–∫–æ–º–Ω", 0.0, 100.0, 41.8),
    "3-–∫–æ–º–Ω": st.sidebar.slider("3-–∫–æ–º–Ω", 0.0, 100.0, 21.8),
}

# ==== –†–∏—Å–æ–≤–∞–Ω–∏–µ –ú–û–ü–æ–≤ ====
st.subheader("1Ô∏è‚É£ –ù–∞—Ä–∏—Å—É–π—Ç–µ –ú–û–ü—ã (–Ω–µ–∂–∏–ª—ã–µ –∑–æ–Ω—ã)")
st.caption("–ü–æ–ª–∏–≥–æ–Ω–∞–ª—å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä")

canvas_result = st_canvas(
    fill_color="rgba(255, 0, 0, 0.3)",
    stroke_width=2,
    stroke_color="#FF0000",
    background_image=grid_img.convert('RGB'),
    update_streamlit=True,
    height=canvas_height,
    width=canvas_width,
    drawing_mode="polygon",
    key="canvas_mop"
)

# ==== –û–±—Ä–∞–±–æ—Ç–∫–∞ –ú–û–ü–æ–≤ ====
def extract_mop_polygons(data_json):
    polygons = []
    if not data_json or "objects" not in data_json:
        return []
    for obj in data_json["objects"]:
        if obj.get("type") == "polygon":
            path = obj.get("path")
            if path:
                poly = Polygon([(x, y) for x, y in path])
                if poly.is_valid:
                    polygons.append(poly)
    return polygons

mop_polys = extract_mop_polygons(canvas_result.json_data)
usable_poly = Polygon([(0, 0), (canvas_width, 0), (canvas_width, canvas_height), (0, canvas_height)])
if mop_polys:
    mop_union = unary_union(mop_polys)
    usable_poly = usable_poly.difference(mop_union)

# ==== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–∞—Ä—Ç–∏—Ä ====
st.subheader("2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–∞—Ä—Ç–∏—Ä")
st.caption("–ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–∞—Ä—Ç–∏—Ä —Å —É—á—ë—Ç–æ–º –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")

apt_constraints = {
    "–°—Ç—É–¥–∏—è": {"min": 28, "max": 31, "width": 7.2},
    "1-–∫–æ–º–Ω": {"min": 32, "max": 46, "width": 7.2},
    "2-–∫–æ–º–Ω": {"min": 47, "max": 65, "width": 7.2},
    "3-–∫–æ–º–Ω": {"min": 66, "max": 99, "width": 7.2},
}

TOTAL_AREA_M2 = (floor_width_m * floor_length_m - (len(mop_polys) * 15)) * floors

@st.cache_data
def generate_apartments():
    apartments = []
    for apt_type, percent in percent_distribution.items():
        target_area = TOTAL_AREA_M2 * (percent / 100)
        used = 0
        while used < target_area:
            s = random.randint(apt_constraints[apt_type]["min"], apt_constraints[apt_type]["max"])
            w = apt_constraints[apt_type]["width"]
            l = round(s / w, 2)
            if used + s > target_area:
                break
            apartments.append({"–¢–∏–ø": apt_type, "–ü–ª–æ—â–∞–¥—å": s, "–®–∏—Ä–∏–Ω–∞": w, "–î–ª–∏–Ω–∞": l})
            used += s
    return apartments

if st.button("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã"):
    plan = generate_apartments()
    df = pd.DataFrame(plan)
    st.dataframe(df)

    st.subheader("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º")
    fig, ax = plt.subplots()
    df.groupby("–¢–∏–ø")["–ü–ª–æ—â–∞–¥—å"].sum().plot(kind="bar", ax=ax)
    st.pyplot(fig)

    out = BytesIO()
    df.to_excel(out, index=False)
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å Excel", data=out.getvalue(), file_name="plan.xlsx")
